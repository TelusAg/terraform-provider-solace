/*
SEMP (Solace Element Management Protocol)

SEMP (starting in `v2`, see note 1) is a RESTful API for configuring, monitoring, and administering a Solace PubSub+ broker.  SEMP uses URIs to address manageable **resources** of the Solace PubSub+ broker. Resources are individual **objects**, **collections** of objects, or (exclusively in the action API) **actions**. This document applies to the following API:   API|Base Path|Purpose|Comments :---|:---|:---|:--- Configuration|/SEMP/v2/config|Reading and writing config state|See note 2    The following APIs are also available:   API|Base Path|Purpose|Comments :---|:---|:---|:--- Action|/SEMP/v2/action|Performing actions|See note 2 Monitoring|/SEMP/v2/monitor|Querying operational parameters|See note 2    Resources are always nouns, with individual objects being singular and collections being plural.  Objects within a collection are identified by an `obj-id`, which follows the collection name with the form `collection-name/obj-id`.  Actions within an object are identified by an `action-id`, which follows the object name with the form `obj-id/action-id`.  Some examples:  ``` /SEMP/v2/config/msgVpns                        ; MsgVpn collection /SEMP/v2/config/msgVpns/a                      ; MsgVpn object named \"a\" /SEMP/v2/config/msgVpns/a/queues               ; Queue collection in MsgVpn \"a\" /SEMP/v2/config/msgVpns/a/queues/b             ; Queue object named \"b\" in MsgVpn \"a\" /SEMP/v2/action/msgVpns/a/queues/b/startReplay ; Action that starts a replay on Queue \"b\" in MsgVpn \"a\" /SEMP/v2/monitor/msgVpns/a/clients             ; Client collection in MsgVpn \"a\" /SEMP/v2/monitor/msgVpns/a/clients/c           ; Client object named \"c\" in MsgVpn \"a\" ```  ## Collection Resources  Collections are unordered lists of objects (unless described as otherwise), and are described by JSON arrays. Each item in the array represents an object in the same manner as the individual object would normally be represented. In the configuration API, the creation of a new object is done through its collection resource.  ## Object and Action Resources  Objects are composed of attributes, actions, collections, and other objects. They are described by JSON objects as name/value pairs. The collections and actions of an object are not contained directly in the object's JSON content; rather the content includes an attribute containing a URI which points to the collections and actions. These contained resources must be managed through this URI. At a minimum, every object has one or more identifying attributes, and its own `uri` attribute which contains the URI pointing to itself.  Actions are also composed of attributes, and are described by JSON objects as name/value pairs. Unlike objects, however, they are not members of a collection and cannot be retrieved, only performed. Actions only exist in the action API.  Attributes in an object or action may have any combination of the following properties:   Property|Meaning|Comments :---|:---|:--- Identifying|Attribute is involved in unique identification of the object, and appears in its URI| Required|Attribute must be provided in the request| Read-Only|Attribute can only be read, not written.|See note 3 Write-Only|Attribute can only be written, not read, unless the attribute is also opaque|See the documentation for the opaque property Requires-Disable|Attribute can only be changed when object is disabled| Deprecated|Attribute is deprecated, and will disappear in the next SEMP version| Opaque|Attribute can be set or retrieved in opaque form when the `opaquePassword` query parameter is present|See the `opaquePassword` query parameter documentation    In some requests, certain attributes may only be provided in certain combinations with other attributes:   Relationship|Meaning :---|:--- Requires|Attribute may only be changed by a request if a particular attribute or combination of attributes is also provided in the request Conflicts|Attribute may only be provided in a request if a particular attribute or combination of attributes is not also provided in the request    In the monitoring API, any non-identifying attribute may not be returned in a GET.  ## HTTP Methods  The following HTTP methods manipulate resources in accordance with these general principles. Note that some methods are only used in certain APIs:   Method|Resource|Meaning|Request Body|Response Body|Missing Request Attributes :---|:---|:---|:---|:---|:--- POST|Collection|Create object|Initial attribute values|Object attributes and metadata|Set to default PUT|Object|Create or replace object (see note 5)|New attribute values|Object attributes and metadata|Set to default, with certain exceptions (see note 4) PUT|Action|Performs action|Action arguments|Action metadata|N/A PATCH|Object|Update object|New attribute values|Object attributes and metadata|unchanged DELETE|Object|Delete object|Empty|Object metadata|N/A GET|Object|Get object|Empty|Object attributes and metadata|N/A GET|Collection|Get collection|Empty|Object attributes and collection metadata|N/A    ## Common Query Parameters  The following are some common query parameters that are supported by many method/URI combinations. Individual URIs may document additional parameters. Note that multiple query parameters can be used together in a single URI, separated by the ampersand character. For example:  ``` ; Request for the MsgVpns collection using two hypothetical query parameters ; \"q1\" and \"q2\" with values \"val1\" and \"val2\" respectively /SEMP/v2/config/msgVpns?q1=val1&q2=val2 ```  ### select  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. Use this query parameter to limit the size of the returned data for each returned object, return only those fields that are desired, or exclude fields that are not desired.  The value of `select` is a comma-separated list of attribute names. If the list contains attribute names that are not prefaced by `-`, only those attributes are included in the response. If the list contains attribute names that are prefaced by `-`, those attributes are excluded from the response. If the list contains both types, then the difference of the first set of attributes and the second set of attributes is returned. If the list is empty (i.e. `select=`), no attributes are returned.  All attributes that are prefaced by `-` must follow all attributes that are not prefaced by `-`. In addition, each attribute name in the list must match at least one attribute in the object.  Names may include the `*` wildcard (zero or more characters). Nested attribute names are supported using periods (e.g. `parentName.childName`).  Some examples:  ``` ; List of all MsgVpn names /SEMP/v2/config/msgVpns?select=msgVpnName ; List of all MsgVpn and their attributes except for their names /SEMP/v2/config/msgVpns?select=-msgVpnName ; Authentication attributes of MsgVpn \"finance\" /SEMP/v2/config/msgVpns/finance?select=authentication* ; All attributes of MsgVpn \"finance\" except for authentication attributes /SEMP/v2/config/msgVpns/finance?select=-authentication* ; Access related attributes of Queue \"orderQ\" of MsgVpn \"finance\" /SEMP/v2/config/msgVpns/finance/queues/orderQ?select=owner,permission ```  ### where  Include in the response only objects where certain conditions are true. Use this query parameter to limit which objects are returned to those whose attribute values meet the given conditions.  The value of `where` is a comma-separated list of expressions. All expressions must be true for the object to be included in the response. Each expression takes the form:  ``` expression  = attribute-name OP value OP          = '==' | '!=' | '&lt;' | '&gt;' | '&lt;=' | '&gt;=' ```  `value` may be a number, string, `true`, or `false`, as appropriate for the type of `attribute-name`. Greater-than and less-than comparisons only work for numbers. A `*` in a string `value` is interpreted as a wildcard (zero or more characters). Some examples:  ``` ; Only enabled MsgVpns /SEMP/v2/config/msgVpns?where=enabled==true ; Only MsgVpns using basic non-LDAP authentication /SEMP/v2/config/msgVpns?where=authenticationBasicEnabled==true,authenticationBasicType!=ldap ; Only MsgVpns that allow more than 100 client connections /SEMP/v2/config/msgVpns?where=maxConnectionCount>100 ; Only MsgVpns with msgVpnName starting with \"B\": /SEMP/v2/config/msgVpns?where=msgVpnName==B* ```  ### count  Limit the count of objects in the response. This can be useful to limit the size of the response for large collections. The minimum value for `count` is `1` and the default is `10`. There is also a per-collection maximum value to limit request handling time.  `count` does not guarantee that a minimum number of objects will be returned. A page may contain fewer than `count` objects or even be empty. Additional objects may nonetheless be available for retrieval on subsequent pages. See the `cursor` query parameter documentation for more information on paging.  For example: ``` ; Up to 25 MsgVpns /SEMP/v2/config/msgVpns?count=25 ```  ### cursor  The cursor, or position, for the next page of objects. Cursors are opaque data that should not be created or interpreted by SEMP clients, and should only be used as described below.  When a request is made for a collection and there may be additional objects available for retrieval that are not included in the initial response, the response will include a `cursorQuery` field containing a cursor. The value of this field can be specified in the `cursor` query parameter of a subsequent request to retrieve the next page of objects. For convenience, an appropriate URI is constructed automatically by the broker and included in the `nextPageUri` field of the response. This URI can be used directly to retrieve the next page of objects.  Applications must continue to follow the `nextPageUri` if one is provided in order to retrieve the full set of objects associated with the request, even if a page contains fewer than the requested number of objects (see the `count` query parameter documentation) or is empty.  ### opaquePassword  Attributes with the opaque property are also write-only and so cannot normally be retrieved in a GET. However, when a password is provided in the `opaquePassword` query parameter, attributes with the opaque property are retrieved in a GET in opaque form, encrypted with this password. The query parameter can also be used on a POST, PATCH, or PUT to set opaque attributes using opaque attribute values retrieved in a GET, so long as:  1. the same password that was used to retrieve the opaque attribute values is provided; and  2. the broker to which the request is being sent has the same major and minor SEMP version as the broker that produced the opaque attribute values.  The password provided in the query parameter must be a minimum of 8 characters and a maximum of 128 characters.  The query parameter can only be used in the configuration API, and only over HTTPS.  ## Authentication  When a client makes its first SEMPv2 request, it must supply a username and password using HTTP Basic authentication, or an OAuth token or tokens using HTTP Bearer authentication.  When HTTP Basic authentication is used, the broker returns a cookie containing a session key. The client can omit the username and password from subsequent requests, because the broker can use the session cookie for authentication instead. When the session expires or is deleted, the client must provide the username and password again, and the broker creates a new session.  There are a limited number of session slots available on the broker. The broker returns 529 No SEMP Session Available if it is not able to allocate a session.  If certain attributes—such as a user's password—are changed, the broker automatically deletes the affected sessions. These attributes are documented below. However, changes in external user configuration data stored on a RADIUS or LDAP server do not trigger the broker to delete the associated session(s), therefore you must do this manually, if required.  A client can retrieve its current session information using the /about/user endpoint and delete its own session using the /about/user/logout endpoint. A client with appropriate permissions can also manage all sessions using the /sessions endpoint.  Sessions are not created when authenticating with an OAuth token or tokens using HTTP Bearer authentication. If a session cookie is provided, it is ignored.  ## Help  Visit [our website](https://solace.com) to learn more about Solace.  You can also download the SEMP API specifications by clicking [here](https://solace.com/downloads/).  If you need additional support, please contact us at [support@solace.com](mailto:support@solace.com).  ## Notes  Note|Description :---:|:--- 1|This specification defines SEMP starting in \"v2\", and not the original SEMP \"v1\" interface. Request and response formats between \"v1\" and \"v2\" are entirely incompatible, although both protocols share a common port configuration on the Solace PubSub+ broker. They are differentiated by the initial portion of the URI path, one of either \"/SEMP/\" or \"/SEMP/v2/\" 2|This API is partially implemented. Only a subset of all objects are available. 3|Read-only attributes may appear in POST and PUT/PATCH requests. However, if a read-only attribute is not marked as identifying, it will be ignored during a PUT/PATCH. 4|On a PUT, if the SEMP user is not authorized to modify the attribute, its value is left unchanged rather than set to default. In addition, the values of write-only attributes are not set to their defaults on a PUT, except in the following two cases: there is a mutual requires relationship with another non-write-only attribute, both attributes are absent from the request, and the non-write-only attribute is not currently set to its default value; or the attribute is also opaque and the `opaquePassword` query parameter is provided in the request. 5|On a PUT, if the object does not exist, it is created first.  

API version: 2.26
Contact: support@solace.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sempv2

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// MsgVpnApiService MsgVpnApi service
type MsgVpnApiService service

type MsgVpnApiApiCreateMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	body *MsgVpn
	opaquePassword *string
	select_ *[]string
}

// The Message VPN object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRequest) Body(body MsgVpn) MsgVpnApiApiCreateMsgVpnRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRequest) Execute() (*MsgVpnResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnExecute(r)
}

/*
CreateMsgVpn Create a Message VPN object.

Create a Message VPN object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates via config-sync.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationOauthDefaultProviderName|||||x|
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||||x|
msgVpnName|x|x||||
replicationBridgeAuthenticationBasicPassword||||x||x
replicationBridgeAuthenticationClientCertContent||||x||x
replicationBridgeAuthenticationClientCertPassword||||x||
replicationEnabledQueueBehavior||||x||
restTlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MsgVpnApiApiCreateMsgVpnRequest
*/
func (a *MsgVpnApiService) CreateMsgVpn(ctx context.Context) MsgVpnApiApiCreateMsgVpnRequest {
	return MsgVpnApiApiCreateMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MsgVpnResponse
func (a *MsgVpnApiService) CreateMsgVpnExecute(r MsgVpnApiApiCreateMsgVpnRequest) (*MsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnAclProfile
	opaquePassword *string
	select_ *[]string
}

// The ACL Profile object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfileRequest) Body(body MsgVpnAclProfile) MsgVpnApiApiCreateMsgVpnAclProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfileRequest) Execute() (*MsgVpnAclProfileResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileExecute(r)
}

/*
CreateMsgVpnAclProfile Create an ACL Profile object.

Create an ACL Profile object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnAclProfileRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfile(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnAclProfileRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileResponse
func (a *MsgVpnApiService) CreateMsgVpnAclProfileExecute(r MsgVpnApiApiCreateMsgVpnAclProfileRequest) (*MsgVpnAclProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfileClientConnectException
	opaquePassword *string
	select_ *[]string
}

// The Client Connect Exception object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) Body(body MsgVpnAclProfileClientConnectException) MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) Execute() (*MsgVpnAclProfileClientConnectExceptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileClientConnectExceptionExecute(r)
}

/*
CreateMsgVpnAclProfileClientConnectException Create a Client Connect Exception object.

Create a Client Connect Exception object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
clientConnectExceptionAddress|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfileClientConnectException(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileClientConnectExceptionResponse
func (a *MsgVpnApiService) CreateMsgVpnAclProfileClientConnectExceptionExecute(r MsgVpnApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) (*MsgVpnAclProfileClientConnectExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileClientConnectExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfileClientConnectException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfilePublishException
	opaquePassword *string
	select_ *[]string
}

// The Publish Topic Exception object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest) Body(body MsgVpnAclProfilePublishException) MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest) Execute() (*MsgVpnAclProfilePublishExceptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfilePublishExceptionExecute(r)
}

/*
CreateMsgVpnAclProfilePublishException Create a Publish Topic Exception object.

Create a Publish Topic Exception object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||x|
msgVpnName|x||x||x|
publishExceptionTopic|x|x|||x|
topicSyntax|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest

Deprecated
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfilePublishException(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilePublishExceptionResponse
// Deprecated
func (a *MsgVpnApiService) CreateMsgVpnAclProfilePublishExceptionExecute(r MsgVpnApiApiCreateMsgVpnAclProfilePublishExceptionRequest) (*MsgVpnAclProfilePublishExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilePublishExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfilePublishException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfilePublishTopicException
	opaquePassword *string
	select_ *[]string
}

// The Publish Topic Exception object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) Body(body MsgVpnAclProfilePublishTopicException) MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) Execute() (*MsgVpnAclProfilePublishTopicExceptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfilePublishTopicExceptionExecute(r)
}

/*
CreateMsgVpnAclProfilePublishTopicException Create a Publish Topic Exception object.

Create a Publish Topic Exception object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
msgVpnName|x||x|||
publishTopicException|x|x||||
publishTopicExceptionSyntax|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfilePublishTopicException(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilePublishTopicExceptionResponse
func (a *MsgVpnApiService) CreateMsgVpnAclProfilePublishTopicExceptionExecute(r MsgVpnApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) (*MsgVpnAclProfilePublishTopicExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilePublishTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfilePublishTopicException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfileSubscribeException
	opaquePassword *string
	select_ *[]string
}

// The Subscribe Topic Exception object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) Body(body MsgVpnAclProfileSubscribeException) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) Execute() (*MsgVpnAclProfileSubscribeExceptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileSubscribeExceptionExecute(r)
}

/*
CreateMsgVpnAclProfileSubscribeException Create a Subscribe Topic Exception object.

Create a Subscribe Topic Exception object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||x|
msgVpnName|x||x||x|
subscribeExceptionTopic|x|x|||x|
topicSyntax|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest

Deprecated
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfileSubscribeException(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeExceptionResponse
// Deprecated
func (a *MsgVpnApiService) CreateMsgVpnAclProfileSubscribeExceptionExecute(r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) (*MsgVpnAclProfileSubscribeExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfileSubscribeException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfileSubscribeShareNameException
	opaquePassword *string
	select_ *[]string
}

// The Subscribe Share Name Exception object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) Body(body MsgVpnAclProfileSubscribeShareNameException) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) Execute() (*MsgVpnAclProfileSubscribeShareNameExceptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileSubscribeShareNameExceptionExecute(r)
}

/*
CreateMsgVpnAclProfileSubscribeShareNameException Create a Subscribe Share Name Exception object.

Create a Subscribe Share Name Exception object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
msgVpnName|x||x|||
subscribeShareNameException|x|x||||
subscribeShareNameExceptionSyntax|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfileSubscribeShareNameException(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeShareNameExceptionResponse
func (a *MsgVpnApiService) CreateMsgVpnAclProfileSubscribeShareNameExceptionExecute(r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) (*MsgVpnAclProfileSubscribeShareNameExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeShareNameExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfileSubscribeShareNameException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfileSubscribeTopicException
	opaquePassword *string
	select_ *[]string
}

// The Subscribe Topic Exception object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) Body(body MsgVpnAclProfileSubscribeTopicException) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) Execute() (*MsgVpnAclProfileSubscribeTopicExceptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileSubscribeTopicExceptionExecute(r)
}

/*
CreateMsgVpnAclProfileSubscribeTopicException Create a Subscribe Topic Exception object.

Create a Subscribe Topic Exception object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
msgVpnName|x||x|||
subscribeTopicException|x|x||||
subscribeTopicExceptionSyntax|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAclProfileSubscribeTopicException(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	return MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeTopicExceptionResponse
func (a *MsgVpnApiService) CreateMsgVpnAclProfileSubscribeTopicExceptionExecute(r MsgVpnApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) (*MsgVpnAclProfileSubscribeTopicExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAclProfileSubscribeTopicException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnAuthenticationOauthProfile
	opaquePassword *string
	select_ *[]string
}

// The OAuth Profile object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest) Body(body MsgVpnAuthenticationOauthProfile) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest) Execute() (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAuthenticationOauthProfileExecute(r)
}

/*
CreateMsgVpnAuthenticationOauthProfile Create an OAuth Profile object.

Create an OAuth Profile object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

OAuth profiles specify how to securely authenticate to an OAuth provider.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientSecret||||x||x
msgVpnName|x||x|||
oauthProfileName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProfile(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest {
	return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResponse
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProfileExecute(r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileRequest) (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAuthenticationOauthProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	body *MsgVpnAuthenticationOauthProfileClientRequiredClaim
	opaquePassword *string
	select_ *[]string
}

// The Required Claim object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) Body(body MsgVpnAuthenticationOauthProfileClientRequiredClaim) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) Execute() (*MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAuthenticationOauthProfileClientRequiredClaimExecute(r)
}

/*
CreateMsgVpnAuthenticationOauthProfileClientRequiredClaim Create a Required Claim object.

Create a Required Claim object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

Additional claims to be verified in the ID token.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientRequiredClaimName|x|x||||
clientRequiredClaimValue||x||||
msgVpnName|x||x|||
oauthProfileName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProfileClientRequiredClaim(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProfileClientRequiredClaimExecute(r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) (*MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAuthenticationOauthProfileClientRequiredClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/clientRequiredClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	body *MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim
	opaquePassword *string
	select_ *[]string
}

// The Required Claim object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) Body(body MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) Execute() (*MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimExecute(r)
}

/*
CreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim Create a Required Claim object.

Create a Required Claim object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

Additional claims to be verified in the access token.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
oauthProfileName|x||x|||
resourceServerRequiredClaimName|x|x||||
resourceServerRequiredClaimValue||x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimExecute(r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) (*MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/resourceServerRequiredClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnAuthenticationOauthProvider
	opaquePassword *string
	select_ *[]string
}

// The OAuth Provider object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest) Body(body MsgVpnAuthenticationOauthProvider) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest) Execute() (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
CreateMsgVpnAuthenticationOauthProvider Create an OAuth Provider object.

Create an OAuth Provider object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
audienceClaimName|||||x|
audienceClaimSource|||||x|
audienceClaimValue|||||x|
audienceValidationEnabled|||||x|
authorizationGroupClaimName|||||x|
authorizationGroupClaimSource|||||x|
authorizationGroupEnabled|||||x|
disconnectOnTokenExpirationEnabled|||||x|
enabled|||||x|
jwksRefreshInterval|||||x|
jwksUri|||||x|
msgVpnName|x||x||x|
oauthProviderName|x|x|||x|
tokenIgnoreTimeLimitsEnabled|||||x|
tokenIntrospectionParameterName|||||x|
tokenIntrospectionPassword||||x|x|x
tokenIntrospectionTimeout|||||x|
tokenIntrospectionUri|||||x|
tokenIntrospectionUsername|||||x|
usernameClaimName|||||x|
usernameClaimSource|||||x|
usernameValidateEnabled|||||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.25. Replaced by authenticationOauthProfiles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest

Deprecated
*/
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProvider(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	return MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProviderResponse
// Deprecated
func (a *MsgVpnApiService) CreateMsgVpnAuthenticationOauthProviderExecute(r MsgVpnApiApiCreateMsgVpnAuthenticationOauthProviderRequest) (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnAuthorizationGroup
	opaquePassword *string
	select_ *[]string
}

// The Authorization Group object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest) Body(body MsgVpnAuthorizationGroup) MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest) Execute() (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnAuthorizationGroupExecute(r)
}

/*
CreateMsgVpnAuthorizationGroup Create an Authorization Group object.

Create an Authorization Group object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

To use client authorization groups configured on an external server to provide client authorizations, Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the external server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authorizationGroupName|x|x||||
msgVpnName|x||x|||
orderAfterAuthorizationGroupName||||x||
orderBeforeAuthorizationGroupName||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnAuthorizationGroup(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest {
	return MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthorizationGroupResponse
func (a *MsgVpnApiService) CreateMsgVpnAuthorizationGroupExecute(r MsgVpnApiApiCreateMsgVpnAuthorizationGroupRequest) (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnBridge
	opaquePassword *string
	select_ *[]string
}

// The Bridge object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnBridgeRequest) Body(body MsgVpnBridge) MsgVpnApiApiCreateMsgVpnBridgeRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnBridgeRequest) Execute() (*MsgVpnBridgeResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeExecute(r)
}

/*
CreateMsgVpnBridge Create a Bridge object.

Create a Bridge object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
msgVpnName|x||x|||
remoteAuthenticationBasicPassword||||x||x
remoteAuthenticationClientCertContent||||x||x
remoteAuthenticationClientCertPassword||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnBridgeRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnBridge(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnBridgeRequest {
	return MsgVpnApiApiCreateMsgVpnBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeResponse
func (a *MsgVpnApiService) CreateMsgVpnBridgeExecute(r MsgVpnApiApiCreateMsgVpnBridgeRequest) (*MsgVpnBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	body *MsgVpnBridgeRemoteMsgVpn
	opaquePassword *string
	select_ *[]string
}

// The Remote Message VPN object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) Body(body MsgVpnBridgeRemoteMsgVpn) MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) Execute() (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
CreateMsgVpnBridgeRemoteMsgVpn Create a Remote Message VPN object.

Create a Remote Message VPN object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x|||
bridgeVirtualRouter|x||x|||
msgVpnName|x||x|||
password||||x||x
remoteMsgVpnInterface|x|||||
remoteMsgVpnLocation|x|x||||
remoteMsgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnBridgeRemoteMsgVpn(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	return MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteMsgVpnResponse
func (a *MsgVpnApiService) CreateMsgVpnBridgeRemoteMsgVpnExecute(r MsgVpnApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	body *MsgVpnBridgeRemoteSubscription
	opaquePassword *string
	select_ *[]string
}

// The Remote Subscription object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) Body(body MsgVpnBridgeRemoteSubscription) MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) Execute() (*MsgVpnBridgeRemoteSubscriptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeRemoteSubscriptionExecute(r)
}

/*
CreateMsgVpnBridgeRemoteSubscription Create a Remote Subscription object.

Create a Remote Subscription object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x|||
bridgeVirtualRouter|x||x|||
deliverAlwaysEnabled||x||||
msgVpnName|x||x|||
remoteSubscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnBridgeRemoteSubscription(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	return MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteSubscriptionResponse
func (a *MsgVpnApiService) CreateMsgVpnBridgeRemoteSubscriptionExecute(r MsgVpnApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) (*MsgVpnBridgeRemoteSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnBridgeRemoteSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	body *MsgVpnBridgeTlsTrustedCommonName
	opaquePassword *string
	select_ *[]string
}

// The Trusted Common Name object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) Body(body MsgVpnBridgeTlsTrustedCommonName) MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) Execute() (*MsgVpnBridgeTlsTrustedCommonNameResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeTlsTrustedCommonNameExecute(r)
}

/*
CreateMsgVpnBridgeTlsTrustedCommonName Create a Trusted Common Name object.

Create a Trusted Common Name object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x||x|
bridgeVirtualRouter|x||x||x|
msgVpnName|x||x||x|
tlsTrustedCommonName|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest

Deprecated
*/
func (a *MsgVpnApiService) CreateMsgVpnBridgeTlsTrustedCommonName(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	return MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeTlsTrustedCommonNameResponse
// Deprecated
func (a *MsgVpnApiService) CreateMsgVpnBridgeTlsTrustedCommonNameExecute(r MsgVpnApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) (*MsgVpnBridgeTlsTrustedCommonNameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnBridgeTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnClientProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnClientProfile
	opaquePassword *string
	select_ *[]string
}

// The Client Profile object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnClientProfileRequest) Body(body MsgVpnClientProfile) MsgVpnApiApiCreateMsgVpnClientProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnClientProfileRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnClientProfileRequest) Execute() (*MsgVpnClientProfileResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnClientProfileExecute(r)
}

/*
CreateMsgVpnClientProfile Create a Client Profile object.

Create a Client Profile object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
allowCutThroughForwardingEnabled|||||x|
apiQueueManagementCopyFromOnCreateName|||||x|
apiTopicEndpointManagementCopyFromOnCreateName|||||x|
clientProfileName|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnClientProfileRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnClientProfile(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnClientProfileRequest {
	return MsgVpnApiApiCreateMsgVpnClientProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnClientProfileResponse
func (a *MsgVpnApiService) CreateMsgVpnClientProfileExecute(r MsgVpnApiApiCreateMsgVpnClientProfileRequest) (*MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnClientUsernameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnClientUsername
	opaquePassword *string
	select_ *[]string
}

// The Client Username object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnClientUsernameRequest) Body(body MsgVpnClientUsername) MsgVpnApiApiCreateMsgVpnClientUsernameRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnClientUsernameRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnClientUsernameRequest) Execute() (*MsgVpnClientUsernameResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnClientUsernameExecute(r)
}

/*
CreateMsgVpnClientUsername Create a Client Username object.

Create a Client Username object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientUsername|x|x||||
msgVpnName|x||x|||
password||||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnClientUsernameRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnClientUsername(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnClientUsernameRequest {
	return MsgVpnApiApiCreateMsgVpnClientUsernameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnClientUsernameResponse
func (a *MsgVpnApiService) CreateMsgVpnClientUsernameExecute(r MsgVpnApiApiCreateMsgVpnClientUsernameRequest) (*MsgVpnClientUsernameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDistributedCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnDistributedCache
	opaquePassword *string
	select_ *[]string
}

// The Distributed Cache object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheRequest) Body(body MsgVpnDistributedCache) MsgVpnApiApiCreateMsgVpnDistributedCacheRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDistributedCacheRequest) Execute() (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheExecute(r)
}

/*
CreateMsgVpnDistributedCache Create a Distributed Cache object.

Create a Distributed Cache object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnDistributedCache|scheduledDeleteMsgDayList|scheduledDeleteMsgTimeList|
MsgVpnDistributedCache|scheduledDeleteMsgTimeList|scheduledDeleteMsgDayList|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnDistributedCacheRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDistributedCache(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnDistributedCacheRequest {
	return MsgVpnApiApiCreateMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheResponse
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheExecute(r MsgVpnApiApiCreateMsgVpnDistributedCacheRequest) (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	body *MsgVpnDistributedCacheCluster
	opaquePassword *string
	select_ *[]string
}

// The Cache Cluster object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest) Body(body MsgVpnDistributedCacheCluster) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest) Execute() (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterExecute(r)
}

/*
CreateMsgVpnDistributedCacheCluster Create a Cache Cluster object.

Create a Cache Cluster object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheCluster(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest {
	return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterResponse
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterExecute(r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterRequest) (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	body *MsgVpnDistributedCacheClusterGlobalCachingHomeCluster
	opaquePassword *string
	select_ *[]string
}

// The Home Cache Cluster object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Body(body MsgVpnDistributedCacheClusterGlobalCachingHomeCluster) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Execute() (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r)
}

/*
CreateMsgVpnDistributedCacheClusterGlobalCachingHomeCluster Create a Home Cache Cluster object.

Create a Home Cache Cluster object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
homeClusterName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	homeClusterName string
	body *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix
	opaquePassword *string
	select_ *[]string
}

// The Topic Prefix object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Body(body MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Execute() (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r)
}

/*
CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix Create a Topic Prefix object.

Create a Topic Prefix object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
homeClusterName|x||x|||
msgVpnName|x||x|||
topicPrefix|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param homeClusterName The name of the remote Home Cache Cluster.
 @return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(ctx context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		homeClusterName: homeClusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", url.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	body *MsgVpnDistributedCacheClusterInstance
	opaquePassword *string
	select_ *[]string
}

// The Cache Instance object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) Body(body MsgVpnDistributedCacheClusterInstance) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) Execute() (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
CreateMsgVpnDistributedCacheClusterInstance Create a Cache Instance object.

Create a Cache Instance object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
instanceName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterInstance(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterInstanceResponse
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterInstanceExecute(r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	body *MsgVpnDistributedCacheClusterTopic
	opaquePassword *string
	select_ *[]string
}

// The Topic object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) Body(body MsgVpnDistributedCacheClusterTopic) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) Execute() (*MsgVpnDistributedCacheClusterTopicResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterTopicExecute(r)
}

/*
CreateMsgVpnDistributedCacheClusterTopic Create a Topic object.

Create a Topic object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
msgVpnName|x||x|||
topic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterTopic(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	return MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterTopicResponse
func (a *MsgVpnApiService) CreateMsgVpnDistributedCacheClusterTopicExecute(r MsgVpnApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) (*MsgVpnDistributedCacheClusterTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDistributedCacheClusterTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnDmrBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnDmrBridge
	opaquePassword *string
	select_ *[]string
}

// The DMR Bridge object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnDmrBridgeRequest) Body(body MsgVpnDmrBridge) MsgVpnApiApiCreateMsgVpnDmrBridgeRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnDmrBridgeRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnDmrBridgeRequest) Execute() (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnDmrBridgeExecute(r)
}

/*
CreateMsgVpnDmrBridge Create a DMR Bridge object.

Create a DMR Bridge object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
remoteNodeName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnDmrBridgeRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnDmrBridge(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnDmrBridgeRequest {
	return MsgVpnApiApiCreateMsgVpnDmrBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnDmrBridgeResponse
func (a *MsgVpnApiService) CreateMsgVpnDmrBridgeExecute(r MsgVpnApiApiCreateMsgVpnDmrBridgeRequest) (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnJndiConnectionFactory
	opaquePassword *string
	select_ *[]string
}

// The JNDI Connection Factory object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest) Body(body MsgVpnJndiConnectionFactory) MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest) Execute() (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnJndiConnectionFactoryExecute(r)
}

/*
CreateMsgVpnJndiConnectionFactory Create a JNDI Connection Factory object.

Create a JNDI Connection Factory object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnJndiConnectionFactory(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	return MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiConnectionFactoryResponse
func (a *MsgVpnApiService) CreateMsgVpnJndiConnectionFactoryExecute(r MsgVpnApiApiCreateMsgVpnJndiConnectionFactoryRequest) (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnJndiQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnJndiQueue
	opaquePassword *string
	select_ *[]string
}

// The JNDI Queue object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnJndiQueueRequest) Body(body MsgVpnJndiQueue) MsgVpnApiApiCreateMsgVpnJndiQueueRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnJndiQueueRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnJndiQueueRequest) Execute() (*MsgVpnJndiQueueResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnJndiQueueExecute(r)
}

/*
CreateMsgVpnJndiQueue Create a JNDI Queue object.

Create a JNDI Queue object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnJndiQueueRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnJndiQueue(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnJndiQueueRequest {
	return MsgVpnApiApiCreateMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiQueueResponse
func (a *MsgVpnApiService) CreateMsgVpnJndiQueueExecute(r MsgVpnApiApiCreateMsgVpnJndiQueueRequest) (*MsgVpnJndiQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnJndiTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnJndiTopic
	opaquePassword *string
	select_ *[]string
}

// The JNDI Topic object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnJndiTopicRequest) Body(body MsgVpnJndiTopic) MsgVpnApiApiCreateMsgVpnJndiTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnJndiTopicRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnJndiTopicRequest) Execute() (*MsgVpnJndiTopicResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnJndiTopicExecute(r)
}

/*
CreateMsgVpnJndiTopic Create a JNDI Topic object.

Create a JNDI Topic object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
topicName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnJndiTopicRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnJndiTopic(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnJndiTopicRequest {
	return MsgVpnApiApiCreateMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiTopicResponse
func (a *MsgVpnApiService) CreateMsgVpnJndiTopicExecute(r MsgVpnApiApiCreateMsgVpnJndiTopicRequest) (*MsgVpnJndiTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnMqttRetainCache
	opaquePassword *string
	select_ *[]string
}

// The MQTT Retain Cache object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest) Body(body MsgVpnMqttRetainCache) MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest) Execute() (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnMqttRetainCacheExecute(r)
}

/*
CreateMsgVpnMqttRetainCache Create an MQTT Retain Cache object.

Create an MQTT Retain Cache object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnMqttRetainCache(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest {
	return MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttRetainCacheResponse
func (a *MsgVpnApiService) CreateMsgVpnMqttRetainCacheExecute(r MsgVpnApiApiCreateMsgVpnMqttRetainCacheRequest) (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnMqttSessionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnMqttSession
	opaquePassword *string
	select_ *[]string
}

// The MQTT Session object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnMqttSessionRequest) Body(body MsgVpnMqttSession) MsgVpnApiApiCreateMsgVpnMqttSessionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnMqttSessionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnMqttSessionRequest) Execute() (*MsgVpnMqttSessionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnMqttSessionExecute(r)
}

/*
CreateMsgVpnMqttSession Create an MQTT Session object.

Create an MQTT Session object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnMqttSessionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnMqttSession(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnMqttSessionRequest {
	return MsgVpnApiApiCreateMsgVpnMqttSessionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionResponse
func (a *MsgVpnApiService) CreateMsgVpnMqttSessionExecute(r MsgVpnApiApiCreateMsgVpnMqttSessionRequest) (*MsgVpnMqttSessionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	body *MsgVpnMqttSessionSubscription
	opaquePassword *string
	select_ *[]string
}

// The Subscription object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest) Body(body MsgVpnMqttSessionSubscription) MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest) Execute() (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
CreateMsgVpnMqttSessionSubscription Create a Subscription object.

Create a Subscription object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x||x|||
mqttSessionVirtualRouter|x||x|||
msgVpnName|x||x|||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @return MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnMqttSessionSubscription(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	return MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionSubscriptionResponse
func (a *MsgVpnApiService) CreateMsgVpnMqttSessionSubscriptionExecute(r MsgVpnApiApiCreateMsgVpnMqttSessionSubscriptionRequest) (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnQueue
	opaquePassword *string
	select_ *[]string
}

// The Queue object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnQueueRequest) Body(body MsgVpnQueue) MsgVpnApiApiCreateMsgVpnQueueRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnQueueRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnQueueRequest) Execute() (*MsgVpnQueueResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnQueueExecute(r)
}

/*
CreateMsgVpnQueue Create a Queue object.

Create a Queue object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnQueueRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnQueue(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnQueueRequest {
	return MsgVpnApiApiCreateMsgVpnQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueResponse
func (a *MsgVpnApiService) CreateMsgVpnQueueExecute(r MsgVpnApiApiCreateMsgVpnQueueRequest) (*MsgVpnQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	body *MsgVpnQueueSubscription
	opaquePassword *string
	select_ *[]string
}

// The Queue Subscription object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest) Body(body MsgVpnQueueSubscription) MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest) Execute() (*MsgVpnQueueSubscriptionResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnQueueSubscriptionExecute(r)
}

/*
CreateMsgVpnQueueSubscription Create a Queue Subscription object.

Create a Queue Subscription object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueName|x||x|||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @return MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnQueueSubscription(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest {
	return MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueSubscriptionResponse
func (a *MsgVpnApiService) CreateMsgVpnQueueSubscriptionExecute(r MsgVpnApiApiCreateMsgVpnQueueSubscriptionRequest) (*MsgVpnQueueSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnQueueSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnQueueTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnQueueTemplate
	opaquePassword *string
	select_ *[]string
}

// The Queue Template object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnQueueTemplateRequest) Body(body MsgVpnQueueTemplate) MsgVpnApiApiCreateMsgVpnQueueTemplateRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnQueueTemplateRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnQueueTemplateRequest) Execute() (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnQueueTemplateExecute(r)
}

/*
CreateMsgVpnQueueTemplate Create a Queue Template object.

Create a Queue Template object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnQueueTemplateRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnQueueTemplate(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnQueueTemplateRequest {
	return MsgVpnApiApiCreateMsgVpnQueueTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueTemplateResponse
func (a *MsgVpnApiService) CreateMsgVpnQueueTemplateExecute(r MsgVpnApiApiCreateMsgVpnQueueTemplateRequest) (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnReplayLogRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnReplayLog
	opaquePassword *string
	select_ *[]string
}

// The Replay Log object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnReplayLogRequest) Body(body MsgVpnReplayLog) MsgVpnApiApiCreateMsgVpnReplayLogRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnReplayLogRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnReplayLogRequest) Execute() (*MsgVpnReplayLogResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnReplayLogExecute(r)
}

/*
CreateMsgVpnReplayLog Create a Replay Log object.

Create a Replay Log object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
replayLogName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.10.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnReplayLogRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnReplayLog(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnReplayLogRequest {
	return MsgVpnApiApiCreateMsgVpnReplayLogRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnReplayLogResponse
func (a *MsgVpnApiService) CreateMsgVpnReplayLogExecute(r MsgVpnApiApiCreateMsgVpnReplayLogRequest) (*MsgVpnReplayLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnReplicatedTopic
	opaquePassword *string
	select_ *[]string
}

// The Replicated Topic object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest) Body(body MsgVpnReplicatedTopic) MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest) Execute() (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnReplicatedTopicExecute(r)
}

/*
CreateMsgVpnReplicatedTopic Create a Replicated Topic object.

Create a Replicated Topic object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
replicatedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnReplicatedTopic(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest {
	return MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnReplicatedTopicResponse
func (a *MsgVpnApiService) CreateMsgVpnReplicatedTopicExecute(r MsgVpnApiApiCreateMsgVpnReplicatedTopicRequest) (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnRestDeliveryPoint
	opaquePassword *string
	select_ *[]string
}

// The REST Delivery Point object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest) Body(body MsgVpnRestDeliveryPoint) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest) Execute() (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointExecute(r)
}

/*
CreateMsgVpnRestDeliveryPoint Create a REST Delivery Point object.

Create a REST Delivery Point object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPoint(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest {
	return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointResponse
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointExecute(r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRequest) (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	body *MsgVpnRestDeliveryPointQueueBinding
	opaquePassword *string
	select_ *[]string
}

// The Queue Binding object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) Body(body MsgVpnRestDeliveryPointQueueBinding) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
CreateMsgVpnRestDeliveryPointQueueBinding Create a Queue Binding object.

Create a Queue Binding object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueBindingName|x|x||||
restDeliveryPointName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointQueueBinding(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	return MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingResponse
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointQueueBindingExecute(r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	body *MsgVpnRestDeliveryPointQueueBindingRequestHeader
	opaquePassword *string
	select_ *[]string
}

// The Request Header object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Body(body MsgVpnRestDeliveryPointQueueBindingRequestHeader) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r)
}

/*
CreateMsgVpnRestDeliveryPointQueueBindingRequestHeader Create a Request Header object.

Create a Request Header object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A request header to be added to the HTTP request.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
headerName|x|x||||
msgVpnName|x||x|||
queueBindingName|x||x|||
restDeliveryPointName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.23.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointQueueBindingRequestHeader(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	return MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r MsgVpnApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnRestDeliveryPointQueueBindingRequestHeader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}/requestHeaders"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	body *MsgVpnRestDeliveryPointRestConsumer
	opaquePassword *string
	select_ *[]string
}

// The REST Consumer object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) Body(body MsgVpnRestDeliveryPointRestConsumer) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
CreateMsgVpnRestDeliveryPointRestConsumer Create a REST Consumer object.

Create a REST Consumer object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationAwsSecretAccessKey||||x||x
authenticationClientCertContent||||x||x
authenticationClientCertPassword||||x||
authenticationHttpBasicPassword||||x||x
authenticationHttpHeaderValue||||x||x
authenticationOauthClientSecret||||x||x
authenticationOauthJwtSecretKey||||x||x
msgVpnName|x||x|||
restConsumerName|x|x||||
restDeliveryPointName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointRestConsumer(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerResponse
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointRestConsumerExecute(r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	body *MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim
	opaquePassword *string
	select_ *[]string
}

// The Claim object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Body(body MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r)
}

/*
CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim Create a Claim object.

Create a Claim object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Claim is added to the JWT sent to the OAuth token request endpoint.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
oauthJwtClaimName|x|x||||
oauthJwtClaimValue||x||||
restConsumerName|x||x|||
restDeliveryPointName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.21.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) (*MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	body *MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName
	opaquePassword *string
	select_ *[]string
}

// The Trusted Common Name object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Body(body MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r)
}

/*
CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName Create a Trusted Common Name object.

Create a Trusted Common Name object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||x|
restConsumerName|x||x||x|
restDeliveryPointName|x||x||x|
tlsTrustedCommonName|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest

Deprecated
*/
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	return MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
// Deprecated
func (a *MsgVpnApiService) CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r MsgVpnApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) (*MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnSequencedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnSequencedTopic
	opaquePassword *string
	select_ *[]string
}

// The Sequenced Topic object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnSequencedTopicRequest) Body(body MsgVpnSequencedTopic) MsgVpnApiApiCreateMsgVpnSequencedTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnSequencedTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnSequencedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnSequencedTopicRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnSequencedTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnSequencedTopicRequest) Execute() (*MsgVpnSequencedTopicResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnSequencedTopicExecute(r)
}

/*
CreateMsgVpnSequencedTopic Create a Sequenced Topic object.

Create a Sequenced Topic object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
sequencedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnSequencedTopicRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnSequencedTopic(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnSequencedTopicRequest {
	return MsgVpnApiApiCreateMsgVpnSequencedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnSequencedTopicResponse
func (a *MsgVpnApiService) CreateMsgVpnSequencedTopicExecute(r MsgVpnApiApiCreateMsgVpnSequencedTopicRequest) (*MsgVpnSequencedTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnSequencedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnSequencedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnTopicEndpointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnTopicEndpoint
	opaquePassword *string
	select_ *[]string
}

// The Topic Endpoint object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnTopicEndpointRequest) Body(body MsgVpnTopicEndpoint) MsgVpnApiApiCreateMsgVpnTopicEndpointRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnTopicEndpointRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnTopicEndpointRequest) Execute() (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnTopicEndpointExecute(r)
}

/*
CreateMsgVpnTopicEndpoint Create a Topic Endpoint object.

Create a Topic Endpoint object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
topicEndpointName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnTopicEndpointRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnTopicEndpoint(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnTopicEndpointRequest {
	return MsgVpnApiApiCreateMsgVpnTopicEndpointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointResponse
func (a *MsgVpnApiService) CreateMsgVpnTopicEndpointExecute(r MsgVpnApiApiCreateMsgVpnTopicEndpointRequest) (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpnTopicEndpointTemplate
	opaquePassword *string
	select_ *[]string
}

// The Topic Endpoint Template object&#39;s attributes.
func (r MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest) Body(body MsgVpnTopicEndpointTemplate) MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest) Execute() (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	return r.ApiService.CreateMsgVpnTopicEndpointTemplateExecute(r)
}

/*
CreateMsgVpnTopicEndpointTemplate Create a Topic Endpoint Template object.

Create a Topic Endpoint Template object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
topicEndpointTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest
*/
func (a *MsgVpnApiService) CreateMsgVpnTopicEndpointTemplate(ctx context.Context, msgVpnName string) MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	return MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointTemplateResponse
func (a *MsgVpnApiService) CreateMsgVpnTopicEndpointTemplateExecute(r MsgVpnApiApiCreateMsgVpnTopicEndpointTemplateRequest) (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.CreateMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
}


func (r MsgVpnApiApiDeleteMsgVpnRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnExecute(r)
}

/*
DeleteMsgVpn Delete a Message VPN object.

Delete a Message VPN object. The deletion of instances of this object are synchronized to HA mates via config-sync.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiDeleteMsgVpnRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpn(ctx context.Context, msgVpnName string) MsgVpnApiApiDeleteMsgVpnRequest {
	return MsgVpnApiApiDeleteMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnExecute(r MsgVpnApiApiDeleteMsgVpnRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfileRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileExecute(r)
}

/*
DeleteMsgVpnAclProfile Delete an ACL Profile object.

Delete an ACL Profile object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiDeleteMsgVpnAclProfileRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfile(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiDeleteMsgVpnAclProfileRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileExecute(r MsgVpnApiApiDeleteMsgVpnAclProfileRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	clientConnectExceptionAddress string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileClientConnectExceptionExecute(r)
}

/*
DeleteMsgVpnAclProfileClientConnectException Delete a Client Connect Exception object.

Delete a Client Connect Exception object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param clientConnectExceptionAddress The IP address/netmask of the client connect exception in CIDR form.
 @return MsgVpnApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileClientConnectException(ctx context.Context, msgVpnName string, aclProfileName string, clientConnectExceptionAddress string) MsgVpnApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		clientConnectExceptionAddress: clientConnectExceptionAddress,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileClientConnectExceptionExecute(r MsgVpnApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfileClientConnectException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientConnectExceptionAddress"+"}", url.PathEscape(parameterToString(r.clientConnectExceptionAddress, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfilePublishExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	topicSyntax string
	publishExceptionTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfilePublishExceptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfilePublishExceptionExecute(r)
}

/*
DeleteMsgVpnAclProfilePublishException Delete a Publish Topic Exception object.

Delete a Publish Topic Exception object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param topicSyntax The syntax of the topic for the exception to the default action taken.
 @param publishExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiDeleteMsgVpnAclProfilePublishExceptionRequest

Deprecated
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfilePublishException(ctx context.Context, msgVpnName string, aclProfileName string, topicSyntax string, publishExceptionTopic string) MsgVpnApiApiDeleteMsgVpnAclProfilePublishExceptionRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfilePublishExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		topicSyntax: topicSyntax,
		publishExceptionTopic: publishExceptionTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
// Deprecated
func (a *MsgVpnApiService) DeleteMsgVpnAclProfilePublishExceptionExecute(r MsgVpnApiApiDeleteMsgVpnAclProfilePublishExceptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfilePublishException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", url.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishExceptionTopic"+"}", url.PathEscape(parameterToString(r.publishExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	publishTopicExceptionSyntax string
	publishTopicException string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfilePublishTopicExceptionExecute(r)
}

/*
DeleteMsgVpnAclProfilePublishTopicException Delete a Publish Topic Exception object.

Delete a Publish Topic Exception object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param publishTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 @param publishTopicException The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfilePublishTopicException(ctx context.Context, msgVpnName string, aclProfileName string, publishTopicExceptionSyntax string, publishTopicException string) MsgVpnApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		publishTopicExceptionSyntax: publishTopicExceptionSyntax,
		publishTopicException: publishTopicException,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAclProfilePublishTopicExceptionExecute(r MsgVpnApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfilePublishTopicException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions/{publishTopicExceptionSyntax},{publishTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicExceptionSyntax"+"}", url.PathEscape(parameterToString(r.publishTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicException"+"}", url.PathEscape(parameterToString(r.publishTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	topicSyntax string
	subscribeExceptionTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileSubscribeExceptionExecute(r)
}

/*
DeleteMsgVpnAclProfileSubscribeException Delete a Subscribe Topic Exception object.

Delete a Subscribe Topic Exception object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param topicSyntax The syntax of the topic for the exception to the default action taken.
 @param subscribeExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest

Deprecated
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileSubscribeException(ctx context.Context, msgVpnName string, aclProfileName string, topicSyntax string, subscribeExceptionTopic string) MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		topicSyntax: topicSyntax,
		subscribeExceptionTopic: subscribeExceptionTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
// Deprecated
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileSubscribeExceptionExecute(r MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfileSubscribeException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", url.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeExceptionTopic"+"}", url.PathEscape(parameterToString(r.subscribeExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	subscribeShareNameExceptionSyntax string
	subscribeShareNameException string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileSubscribeShareNameExceptionExecute(r)
}

/*
DeleteMsgVpnAclProfileSubscribeShareNameException Delete a Subscribe Share Name Exception object.

Delete a Subscribe Share Name Exception object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param subscribeShareNameExceptionSyntax The syntax of the subscribe share name for the exception to the default action taken.
 @param subscribeShareNameException The subscribe share name exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileSubscribeShareNameException(ctx context.Context, msgVpnName string, aclProfileName string, subscribeShareNameExceptionSyntax string, subscribeShareNameException string) MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		subscribeShareNameExceptionSyntax: subscribeShareNameExceptionSyntax,
		subscribeShareNameException: subscribeShareNameException,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileSubscribeShareNameExceptionExecute(r MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfileSubscribeShareNameException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions/{subscribeShareNameExceptionSyntax},{subscribeShareNameException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameExceptionSyntax"+"}", url.PathEscape(parameterToString(r.subscribeShareNameExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameException"+"}", url.PathEscape(parameterToString(r.subscribeShareNameException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	subscribeTopicExceptionSyntax string
	subscribeTopicException string
}


func (r MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileSubscribeTopicExceptionExecute(r)
}

/*
DeleteMsgVpnAclProfileSubscribeTopicException Delete a Subscribe Topic Exception object.

Delete a Subscribe Topic Exception object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param subscribeTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 @param subscribeTopicException The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileSubscribeTopicException(ctx context.Context, msgVpnName string, aclProfileName string, subscribeTopicExceptionSyntax string, subscribeTopicException string) MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest {
	return MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		subscribeTopicExceptionSyntax: subscribeTopicExceptionSyntax,
		subscribeTopicException: subscribeTopicException,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAclProfileSubscribeTopicExceptionExecute(r MsgVpnApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAclProfileSubscribeTopicException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions/{subscribeTopicExceptionSyntax},{subscribeTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicExceptionSyntax"+"}", url.PathEscape(parameterToString(r.subscribeTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicException"+"}", url.PathEscape(parameterToString(r.subscribeTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
}


func (r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthenticationOauthProfileExecute(r)
}

/*
DeleteMsgVpnAuthenticationOauthProfile Delete an OAuth Profile object.

Delete an OAuth Profile object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

OAuth profiles specify how to securely authenticate to an OAuth provider.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProfile(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileRequest {
	return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProfileExecute(r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAuthenticationOauthProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	clientRequiredClaimName string
}


func (r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimExecute(r)
}

/*
DeleteMsgVpnAuthenticationOauthProfileClientRequiredClaim Delete a Required Claim object.

Delete a Required Claim object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

Additional claims to be verified in the ID token.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @param clientRequiredClaimName The name of the ID token claim to verify.
 @return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProfileClientRequiredClaim(ctx context.Context, msgVpnName string, oauthProfileName string, clientRequiredClaimName string) MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
		clientRequiredClaimName: clientRequiredClaimName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimExecute(r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAuthenticationOauthProfileClientRequiredClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/clientRequiredClaims/{clientRequiredClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientRequiredClaimName"+"}", url.PathEscape(parameterToString(r.clientRequiredClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	resourceServerRequiredClaimName string
}


func (r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimExecute(r)
}

/*
DeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim Delete a Required Claim object.

Delete a Required Claim object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

Additional claims to be verified in the access token.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @param resourceServerRequiredClaimName The name of the access token claim to verify.
 @return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim(ctx context.Context, msgVpnName string, oauthProfileName string, resourceServerRequiredClaimName string) MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
		resourceServerRequiredClaimName: resourceServerRequiredClaimName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimExecute(r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/resourceServerRequiredClaims/{resourceServerRequiredClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceServerRequiredClaimName"+"}", url.PathEscape(parameterToString(r.resourceServerRequiredClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProviderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProviderName string
}


func (r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProviderRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
DeleteMsgVpnAuthenticationOauthProvider Delete an OAuth Provider object.

Delete an OAuth Provider object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.25. Replaced by authenticationOauthProfiles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProviderName The name of the OAuth Provider.
 @return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProviderRequest

Deprecated
*/
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProvider(ctx context.Context, msgVpnName string, oauthProviderName string) MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProviderRequest {
	return MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProviderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
// Deprecated
func (a *MsgVpnApiService) DeleteMsgVpnAuthenticationOauthProviderExecute(r MsgVpnApiApiDeleteMsgVpnAuthenticationOauthProviderRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", url.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnAuthorizationGroupRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	authorizationGroupName string
}


func (r MsgVpnApiApiDeleteMsgVpnAuthorizationGroupRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthorizationGroupExecute(r)
}

/*
DeleteMsgVpnAuthorizationGroup Delete an Authorization Group object.

Delete an Authorization Group object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

To use client authorization groups configured on an external server to provide client authorizations, Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the external server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param authorizationGroupName The name of the Authorization Group. For LDAP groups, special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 @return MsgVpnApiApiDeleteMsgVpnAuthorizationGroupRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnAuthorizationGroup(ctx context.Context, msgVpnName string, authorizationGroupName string) MsgVpnApiApiDeleteMsgVpnAuthorizationGroupRequest {
	return MsgVpnApiApiDeleteMsgVpnAuthorizationGroupRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnAuthorizationGroupExecute(r MsgVpnApiApiDeleteMsgVpnAuthorizationGroupRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", url.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
}


func (r MsgVpnApiApiDeleteMsgVpnBridgeRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeExecute(r)
}

/*
DeleteMsgVpnBridge Delete a Bridge object.

Delete a Bridge object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiDeleteMsgVpnBridgeRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnBridge(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiDeleteMsgVpnBridgeRequest {
	return MsgVpnApiApiDeleteMsgVpnBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnBridgeExecute(r MsgVpnApiApiDeleteMsgVpnBridgeRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	remoteMsgVpnName string
	remoteMsgVpnLocation string
	remoteMsgVpnInterface string
}


func (r MsgVpnApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
DeleteMsgVpnBridgeRemoteMsgVpn Delete a Remote Message VPN object.

Delete a Remote Message VPN object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Remote Message VPN is the Message VPN that the Bridge connects to.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param remoteMsgVpnName The name of the remote Message VPN.
 @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 @return MsgVpnApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnBridgeRemoteMsgVpn(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) MsgVpnApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest {
	return MsgVpnApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		remoteMsgVpnName: remoteMsgVpnName,
		remoteMsgVpnLocation: remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnBridgeRemoteMsgVpnExecute(r MsgVpnApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	remoteSubscriptionTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeRemoteSubscriptionExecute(r)
}

/*
DeleteMsgVpnBridgeRemoteSubscription Delete a Remote Subscription object.

Delete a Remote Subscription object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param remoteSubscriptionTopic The topic of the Bridge remote subscription.
 @return MsgVpnApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnBridgeRemoteSubscription(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteSubscriptionTopic string) MsgVpnApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest {
	return MsgVpnApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		remoteSubscriptionTopic: remoteSubscriptionTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnBridgeRemoteSubscriptionExecute(r MsgVpnApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnBridgeRemoteSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteSubscriptionTopic"+"}", url.PathEscape(parameterToString(r.remoteSubscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	tlsTrustedCommonName string
}


func (r MsgVpnApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeTlsTrustedCommonNameExecute(r)
}

/*
DeleteMsgVpnBridgeTlsTrustedCommonName Delete a Trusted Common Name object.

Delete a Trusted Common Name object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 @return MsgVpnApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest

Deprecated
*/
func (a *MsgVpnApiService) DeleteMsgVpnBridgeTlsTrustedCommonName(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, tlsTrustedCommonName string) MsgVpnApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest {
	return MsgVpnApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
// Deprecated
func (a *MsgVpnApiService) DeleteMsgVpnBridgeTlsTrustedCommonNameExecute(r MsgVpnApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnBridgeTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", url.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnClientProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientProfileName string
}


func (r MsgVpnApiApiDeleteMsgVpnClientProfileRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnClientProfileExecute(r)
}

/*
DeleteMsgVpnClientProfile Delete a Client Profile object.

Delete a Client Profile object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientProfileName The name of the Client Profile.
 @return MsgVpnApiApiDeleteMsgVpnClientProfileRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnClientProfile(ctx context.Context, msgVpnName string, clientProfileName string) MsgVpnApiApiDeleteMsgVpnClientProfileRequest {
	return MsgVpnApiApiDeleteMsgVpnClientProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientProfileName: clientProfileName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnClientProfileExecute(r MsgVpnApiApiDeleteMsgVpnClientProfileRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", url.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnClientUsernameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientUsername string
}


func (r MsgVpnApiApiDeleteMsgVpnClientUsernameRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnClientUsernameExecute(r)
}

/*
DeleteMsgVpnClientUsername Delete a Client Username object.

Delete a Client Username object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientUsername The name of the Client Username.
 @return MsgVpnApiApiDeleteMsgVpnClientUsernameRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnClientUsername(ctx context.Context, msgVpnName string, clientUsername string) MsgVpnApiApiDeleteMsgVpnClientUsernameRequest {
	return MsgVpnApiApiDeleteMsgVpnClientUsernameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientUsername: clientUsername,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnClientUsernameExecute(r MsgVpnApiApiDeleteMsgVpnClientUsernameRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", url.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDistributedCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
}


func (r MsgVpnApiApiDeleteMsgVpnDistributedCacheRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheExecute(r)
}

/*
DeleteMsgVpnDistributedCache Delete a Distributed Cache object.

Delete a Distributed Cache object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @return MsgVpnApiApiDeleteMsgVpnDistributedCacheRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiDeleteMsgVpnDistributedCacheRequest {
	return MsgVpnApiApiDeleteMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheExecute(r MsgVpnApiApiDeleteMsgVpnDistributedCacheRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
}


func (r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterExecute(r)
}

/*
DeleteMsgVpnDistributedCacheCluster Delete a Cache Cluster object.

Delete a Cache Cluster object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterRequest {
	return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterExecute(r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	homeClusterName string
}


func (r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r)
}

/*
DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeCluster Delete a Home Cache Cluster object.

Delete a Home Cache Cluster object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param homeClusterName The name of the remote Home Cache Cluster.
 @return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		homeClusterName: homeClusterName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", url.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	homeClusterName string
	topicPrefix string
}


func (r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r)
}

/*
DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix Delete a Topic Prefix object.

Delete a Topic Prefix object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param homeClusterName The name of the remote Home Cache Cluster.
 @param topicPrefix A topic prefix for global topics available from the remote Home Cache Cluster. A wildcard (/>) is implied at the end of the prefix.
 @return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(ctx context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string, topicPrefix string) MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		homeClusterName: homeClusterName,
		topicPrefix: topicPrefix,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes/{topicPrefix}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", url.PathEscape(parameterToString(r.homeClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicPrefix"+"}", url.PathEscape(parameterToString(r.topicPrefix, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	instanceName string
}


func (r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
DeleteMsgVpnDistributedCacheClusterInstance Delete a Cache Instance object.

Delete a Cache Instance object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param instanceName The name of the Cache Instance.
 @return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterInstance(ctx context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest {
	return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		instanceName: instanceName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterInstanceExecute(r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", url.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	topic string
}


func (r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterTopicExecute(r)
}

/*
DeleteMsgVpnDistributedCacheClusterTopic Delete a Topic object.

Delete a Topic object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param topic The value of the Topic in the form a/b/c.
 @return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterTopic(ctx context.Context, msgVpnName string, cacheName string, clusterName string, topic string) MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest {
	return MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		topic: topic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDistributedCacheClusterTopicExecute(r MsgVpnApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDistributedCacheClusterTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics/{topic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topic"+"}", url.PathEscape(parameterToString(r.topic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnDmrBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	remoteNodeName string
}


func (r MsgVpnApiApiDeleteMsgVpnDmrBridgeRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnDmrBridgeExecute(r)
}

/*
DeleteMsgVpnDmrBridge Delete a DMR Bridge object.

Delete a DMR Bridge object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 @return MsgVpnApiApiDeleteMsgVpnDmrBridgeRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnDmrBridge(ctx context.Context, msgVpnName string, remoteNodeName string) MsgVpnApiApiDeleteMsgVpnDmrBridgeRequest {
	return MsgVpnApiApiDeleteMsgVpnDmrBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnDmrBridgeExecute(r MsgVpnApiApiDeleteMsgVpnDmrBridgeRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", url.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnJndiConnectionFactoryRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	connectionFactoryName string
}


func (r MsgVpnApiApiDeleteMsgVpnJndiConnectionFactoryRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnJndiConnectionFactoryExecute(r)
}

/*
DeleteMsgVpnJndiConnectionFactory Delete a JNDI Connection Factory object.

Delete a JNDI Connection Factory object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param connectionFactoryName The name of the JMS Connection Factory.
 @return MsgVpnApiApiDeleteMsgVpnJndiConnectionFactoryRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnJndiConnectionFactory(ctx context.Context, msgVpnName string, connectionFactoryName string) MsgVpnApiApiDeleteMsgVpnJndiConnectionFactoryRequest {
	return MsgVpnApiApiDeleteMsgVpnJndiConnectionFactoryRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnJndiConnectionFactoryExecute(r MsgVpnApiApiDeleteMsgVpnJndiConnectionFactoryRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", url.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnJndiQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
}


func (r MsgVpnApiApiDeleteMsgVpnJndiQueueRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnJndiQueueExecute(r)
}

/*
DeleteMsgVpnJndiQueue Delete a JNDI Queue object.

Delete a JNDI Queue object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The JNDI name of the JMS Queue.
 @return MsgVpnApiApiDeleteMsgVpnJndiQueueRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnJndiQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiDeleteMsgVpnJndiQueueRequest {
	return MsgVpnApiApiDeleteMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnJndiQueueExecute(r MsgVpnApiApiDeleteMsgVpnJndiQueueRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnJndiTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicName string
}


func (r MsgVpnApiApiDeleteMsgVpnJndiTopicRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnJndiTopicExecute(r)
}

/*
DeleteMsgVpnJndiTopic Delete a JNDI Topic object.

Delete a JNDI Topic object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicName The JNDI name of the JMS Topic.
 @return MsgVpnApiApiDeleteMsgVpnJndiTopicRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnJndiTopic(ctx context.Context, msgVpnName string, topicName string) MsgVpnApiApiDeleteMsgVpnJndiTopicRequest {
	return MsgVpnApiApiDeleteMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicName: topicName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnJndiTopicExecute(r MsgVpnApiApiDeleteMsgVpnJndiTopicRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", url.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnMqttRetainCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
}


func (r MsgVpnApiApiDeleteMsgVpnMqttRetainCacheRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnMqttRetainCacheExecute(r)
}

/*
DeleteMsgVpnMqttRetainCache Delete an MQTT Retain Cache object.

Delete an MQTT Retain Cache object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the MQTT Retain Cache.
 @return MsgVpnApiApiDeleteMsgVpnMqttRetainCacheRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnMqttRetainCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiDeleteMsgVpnMqttRetainCacheRequest {
	return MsgVpnApiApiDeleteMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnMqttRetainCacheExecute(r MsgVpnApiApiDeleteMsgVpnMqttRetainCacheRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnMqttSessionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
}


func (r MsgVpnApiApiDeleteMsgVpnMqttSessionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnMqttSessionExecute(r)
}

/*
DeleteMsgVpnMqttSession Delete an MQTT Session object.

Delete an MQTT Session object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @return MsgVpnApiApiDeleteMsgVpnMqttSessionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnMqttSession(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) MsgVpnApiApiDeleteMsgVpnMqttSessionRequest {
	return MsgVpnApiApiDeleteMsgVpnMqttSessionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnMqttSessionExecute(r MsgVpnApiApiDeleteMsgVpnMqttSessionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnMqttSessionSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	subscriptionTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnMqttSessionSubscriptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
DeleteMsgVpnMqttSessionSubscription Delete a Subscription object.

Delete a Subscription object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @param subscriptionTopic The MQTT subscription topic.
 @return MsgVpnApiApiDeleteMsgVpnMqttSessionSubscriptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnMqttSessionSubscription(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) MsgVpnApiApiDeleteMsgVpnMqttSessionSubscriptionRequest {
	return MsgVpnApiApiDeleteMsgVpnMqttSessionSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic: subscriptionTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnMqttSessionSubscriptionExecute(r MsgVpnApiApiDeleteMsgVpnMqttSessionSubscriptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", url.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
}


func (r MsgVpnApiApiDeleteMsgVpnQueueRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnQueueExecute(r)
}

/*
DeleteMsgVpnQueue Delete a Queue object.

Delete a Queue object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @return MsgVpnApiApiDeleteMsgVpnQueueRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiDeleteMsgVpnQueueRequest {
	return MsgVpnApiApiDeleteMsgVpnQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnQueueExecute(r MsgVpnApiApiDeleteMsgVpnQueueRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnQueueSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	subscriptionTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnQueueSubscriptionRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnQueueSubscriptionExecute(r)
}

/*
DeleteMsgVpnQueueSubscription Delete a Queue Subscription object.

Delete a Queue Subscription object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @param subscriptionTopic The topic of the Subscription.
 @return MsgVpnApiApiDeleteMsgVpnQueueSubscriptionRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnQueueSubscription(ctx context.Context, msgVpnName string, queueName string, subscriptionTopic string) MsgVpnApiApiDeleteMsgVpnQueueSubscriptionRequest {
	return MsgVpnApiApiDeleteMsgVpnQueueSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
		subscriptionTopic: subscriptionTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnQueueSubscriptionExecute(r MsgVpnApiApiDeleteMsgVpnQueueSubscriptionRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnQueueSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", url.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnQueueTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueTemplateName string
}


func (r MsgVpnApiApiDeleteMsgVpnQueueTemplateRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnQueueTemplateExecute(r)
}

/*
DeleteMsgVpnQueueTemplate Delete a Queue Template object.

Delete a Queue Template object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Queue Template provides a mechanism for specifying the initial state for client created queues.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueTemplateName The name of the Queue Template.
 @return MsgVpnApiApiDeleteMsgVpnQueueTemplateRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnQueueTemplate(ctx context.Context, msgVpnName string, queueTemplateName string) MsgVpnApiApiDeleteMsgVpnQueueTemplateRequest {
	return MsgVpnApiApiDeleteMsgVpnQueueTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnQueueTemplateExecute(r MsgVpnApiApiDeleteMsgVpnQueueTemplateRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", url.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnReplayLogRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replayLogName string
}


func (r MsgVpnApiApiDeleteMsgVpnReplayLogRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnReplayLogExecute(r)
}

/*
DeleteMsgVpnReplayLog Delete a Replay Log object.

Delete a Replay Log object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.10.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replayLogName The name of the Replay Log.
 @return MsgVpnApiApiDeleteMsgVpnReplayLogRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnReplayLog(ctx context.Context, msgVpnName string, replayLogName string) MsgVpnApiApiDeleteMsgVpnReplayLogRequest {
	return MsgVpnApiApiDeleteMsgVpnReplayLogRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replayLogName: replayLogName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnReplayLogExecute(r MsgVpnApiApiDeleteMsgVpnReplayLogRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", url.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnReplicatedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replicatedTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnReplicatedTopicRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnReplicatedTopicExecute(r)
}

/*
DeleteMsgVpnReplicatedTopic Delete a Replicated Topic object.

Delete a Replicated Topic object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 @return MsgVpnApiApiDeleteMsgVpnReplicatedTopicRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnReplicatedTopic(ctx context.Context, msgVpnName string, replicatedTopic string) MsgVpnApiApiDeleteMsgVpnReplicatedTopicRequest {
	return MsgVpnApiApiDeleteMsgVpnReplicatedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnReplicatedTopicExecute(r MsgVpnApiApiDeleteMsgVpnReplicatedTopicRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", url.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
}


func (r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointExecute(r)
}

/*
DeleteMsgVpnRestDeliveryPoint Delete a REST Delivery Point object.

Delete a REST Delivery Point object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPoint(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRequest {
	return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointExecute(r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
}


func (r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
DeleteMsgVpnRestDeliveryPointQueueBinding Delete a Queue Binding object.

Delete a Queue Binding object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointQueueBinding(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest {
	return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointQueueBindingExecute(r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	headerName string
}


func (r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r)
}

/*
DeleteMsgVpnRestDeliveryPointQueueBindingRequestHeader Delete a Request Header object.

Delete a Request Header object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A request header to be added to the HTTP request.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.23.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @param headerName The name of the HTTP request header.
 @return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointQueueBindingRequestHeader(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string, headerName string) MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
		headerName: headerName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnRestDeliveryPointQueueBindingRequestHeader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}/requestHeaders/{headerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"headerName"+"}", url.PathEscape(parameterToString(r.headerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
}


func (r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
DeleteMsgVpnRestDeliveryPointRestConsumer Delete a REST Consumer object.

Delete a REST Consumer object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointRestConsumer(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest {
	return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointRestConsumerExecute(r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	oauthJwtClaimName string
}


func (r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r)
}

/*
DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim Delete a Claim object.

Delete a Claim object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Claim is added to the JWT sent to the OAuth token request endpoint.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.21.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @param oauthJwtClaimName The name of the additional claim. Cannot be \"exp\", \"iat\", or \"jti\".
 @return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, oauthJwtClaimName string) MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
		oauthJwtClaimName: oauthJwtClaimName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims/{oauthJwtClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthJwtClaimName"+"}", url.PathEscape(parameterToString(r.oauthJwtClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	tlsTrustedCommonName string
}


func (r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r)
}

/*
DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName Delete a Trusted Common Name object.

Delete a Trusted Common Name object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 @return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest

Deprecated
*/
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, tlsTrustedCommonName string) MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	return MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
// Deprecated
func (a *MsgVpnApiService) DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r MsgVpnApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", url.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnSequencedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	sequencedTopic string
}


func (r MsgVpnApiApiDeleteMsgVpnSequencedTopicRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnSequencedTopicExecute(r)
}

/*
DeleteMsgVpnSequencedTopic Delete a Sequenced Topic object.

Delete a Sequenced Topic object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param sequencedTopic Topic for applying sequence numbers.
 @return MsgVpnApiApiDeleteMsgVpnSequencedTopicRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnSequencedTopic(ctx context.Context, msgVpnName string, sequencedTopic string) MsgVpnApiApiDeleteMsgVpnSequencedTopicRequest {
	return MsgVpnApiApiDeleteMsgVpnSequencedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		sequencedTopic: sequencedTopic,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnSequencedTopicExecute(r MsgVpnApiApiDeleteMsgVpnSequencedTopicRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnSequencedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sequencedTopic"+"}", url.PathEscape(parameterToString(r.sequencedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnTopicEndpointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointName string
}


func (r MsgVpnApiApiDeleteMsgVpnTopicEndpointRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnTopicEndpointExecute(r)
}

/*
DeleteMsgVpnTopicEndpoint Delete a Topic Endpoint object.

Delete a Topic Endpoint object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointName The name of the Topic Endpoint.
 @return MsgVpnApiApiDeleteMsgVpnTopicEndpointRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnTopicEndpoint(ctx context.Context, msgVpnName string, topicEndpointName string) MsgVpnApiApiDeleteMsgVpnTopicEndpointRequest {
	return MsgVpnApiApiDeleteMsgVpnTopicEndpointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnTopicEndpointExecute(r MsgVpnApiApiDeleteMsgVpnTopicEndpointRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", url.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiDeleteMsgVpnTopicEndpointTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointTemplateName string
}


func (r MsgVpnApiApiDeleteMsgVpnTopicEndpointTemplateRequest) Execute() (*SempMetaOnlyResponse, *http.Response, error) {
	return r.ApiService.DeleteMsgVpnTopicEndpointTemplateExecute(r)
}

/*
DeleteMsgVpnTopicEndpointTemplate Delete a Topic Endpoint Template object.

Delete a Topic Endpoint Template object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 @return MsgVpnApiApiDeleteMsgVpnTopicEndpointTemplateRequest
*/
func (a *MsgVpnApiService) DeleteMsgVpnTopicEndpointTemplate(ctx context.Context, msgVpnName string, topicEndpointTemplateName string) MsgVpnApiApiDeleteMsgVpnTopicEndpointTemplateRequest {
	return MsgVpnApiApiDeleteMsgVpnTopicEndpointTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

// Execute executes the request
//  @return SempMetaOnlyResponse
func (a *MsgVpnApiService) DeleteMsgVpnTopicEndpointTemplateExecute(r MsgVpnApiApiDeleteMsgVpnTopicEndpointTemplateRequest) (*SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.DeleteMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", url.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRequest) Execute() (*MsgVpnResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnExecute(r)
}

/*
GetMsgVpn Get a Message VPN object.

Get a Message VPN object.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationOauthDefaultProviderName|||x|
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||x|
msgVpnName|x|||
replicationBridgeAuthenticationBasicPassword||x||x
replicationBridgeAuthenticationClientCertContent||x||x
replicationBridgeAuthenticationClientCertPassword||x||
replicationEnabledQueueBehavior||x||
restTlsServerCertEnforceTrustedCommonNameEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnRequest
*/
func (a *MsgVpnApiService) GetMsgVpn(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnRequest {
	return MsgVpnApiApiGetMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnResponse
func (a *MsgVpnApiService) GetMsgVpnExecute(r MsgVpnApiApiGetMsgVpnRequest) (*MsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileRequest) Execute() (*MsgVpnAclProfileResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileExecute(r)
}

/*
GetMsgVpnAclProfile Get an ACL Profile object.

Get an ACL Profile object.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfileRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfile(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfileRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileExecute(r MsgVpnApiApiGetMsgVpnAclProfileRequest) (*MsgVpnAclProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	clientConnectExceptionAddress string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) Execute() (*MsgVpnAclProfileClientConnectExceptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileClientConnectExceptionExecute(r)
}

/*
GetMsgVpnAclProfileClientConnectException Get a Client Connect Exception object.

Get a Client Connect Exception object.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
clientConnectExceptionAddress|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param clientConnectExceptionAddress The IP address/netmask of the client connect exception in CIDR form.
 @return MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileClientConnectException(ctx context.Context, msgVpnName string, aclProfileName string, clientConnectExceptionAddress string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		clientConnectExceptionAddress: clientConnectExceptionAddress,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileClientConnectExceptionResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileClientConnectExceptionExecute(r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) (*MsgVpnAclProfileClientConnectExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileClientConnectExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileClientConnectException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientConnectExceptionAddress"+"}", url.PathEscape(parameterToString(r.clientConnectExceptionAddress, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Execute() (*MsgVpnAclProfileClientConnectExceptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileClientConnectExceptionsExecute(r)
}

/*
GetMsgVpnAclProfileClientConnectExceptions Get a list of Client Connect Exception objects.

Get a list of Client Connect Exception objects.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
clientConnectExceptionAddress|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileClientConnectExceptions(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileClientConnectExceptionsResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileClientConnectExceptionsExecute(r MsgVpnApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) (*MsgVpnAclProfileClientConnectExceptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileClientConnectExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileClientConnectExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	topicSyntax string
	publishExceptionTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest) Execute() (*MsgVpnAclProfilePublishExceptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishExceptionExecute(r)
}

/*
GetMsgVpnAclProfilePublishException Get a Publish Topic Exception object.

Get a Publish Topic Exception object.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
publishExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param topicSyntax The syntax of the topic for the exception to the default action taken.
 @param publishExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishException(ctx context.Context, msgVpnName string, aclProfileName string, topicSyntax string, publishExceptionTopic string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest {
	return MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		topicSyntax: topicSyntax,
		publishExceptionTopic: publishExceptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilePublishExceptionResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishExceptionExecute(r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionRequest) (*MsgVpnAclProfilePublishExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilePublishExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfilePublishException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", url.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishExceptionTopic"+"}", url.PathEscape(parameterToString(r.publishExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Execute() (*MsgVpnAclProfilePublishExceptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishExceptionsExecute(r)
}

/*
GetMsgVpnAclProfilePublishExceptions Get a list of Publish Topic Exception objects.

Get a list of Publish Topic Exception objects.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
publishExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishExceptions(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	return MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilePublishExceptionsResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishExceptionsExecute(r MsgVpnApiApiGetMsgVpnAclProfilePublishExceptionsRequest) (*MsgVpnAclProfilePublishExceptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilePublishExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfilePublishExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	publishTopicExceptionSyntax string
	publishTopicException string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) Execute() (*MsgVpnAclProfilePublishTopicExceptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishTopicExceptionExecute(r)
}

/*
GetMsgVpnAclProfilePublishTopicException Get a Publish Topic Exception object.

Get a Publish Topic Exception object.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
publishTopicException|x|||
publishTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param publishTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 @param publishTopicException The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishTopicException(ctx context.Context, msgVpnName string, aclProfileName string, publishTopicExceptionSyntax string, publishTopicException string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest {
	return MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		publishTopicExceptionSyntax: publishTopicExceptionSyntax,
		publishTopicException: publishTopicException,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilePublishTopicExceptionResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishTopicExceptionExecute(r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) (*MsgVpnAclProfilePublishTopicExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilePublishTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfilePublishTopicException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions/{publishTopicExceptionSyntax},{publishTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicExceptionSyntax"+"}", url.PathEscape(parameterToString(r.publishTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicException"+"}", url.PathEscape(parameterToString(r.publishTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Execute() (*MsgVpnAclProfilePublishTopicExceptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishTopicExceptionsExecute(r)
}

/*
GetMsgVpnAclProfilePublishTopicExceptions Get a list of Publish Topic Exception objects.

Get a list of Publish Topic Exception objects.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
publishTopicException|x|||
publishTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishTopicExceptions(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	return MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilePublishTopicExceptionsResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfilePublishTopicExceptionsExecute(r MsgVpnApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) (*MsgVpnAclProfilePublishTopicExceptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilePublishTopicExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfilePublishTopicExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	topicSyntax string
	subscribeExceptionTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) Execute() (*MsgVpnAclProfileSubscribeExceptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeExceptionExecute(r)
}

/*
GetMsgVpnAclProfileSubscribeException Get a Subscribe Topic Exception object.

Get a Subscribe Topic Exception object.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
subscribeExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param topicSyntax The syntax of the topic for the exception to the default action taken.
 @param subscribeExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeException(ctx context.Context, msgVpnName string, aclProfileName string, topicSyntax string, subscribeExceptionTopic string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		topicSyntax: topicSyntax,
		subscribeExceptionTopic: subscribeExceptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeExceptionResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeExceptionExecute(r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) (*MsgVpnAclProfileSubscribeExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileSubscribeException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", url.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeExceptionTopic"+"}", url.PathEscape(parameterToString(r.subscribeExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Execute() (*MsgVpnAclProfileSubscribeExceptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeExceptionsExecute(r)
}

/*
GetMsgVpnAclProfileSubscribeExceptions Get a list of Subscribe Topic Exception objects.

Get a list of Subscribe Topic Exception objects.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
subscribeExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeExceptions(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeExceptionsResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeExceptionsExecute(r MsgVpnApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) (*MsgVpnAclProfileSubscribeExceptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileSubscribeExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	subscribeShareNameExceptionSyntax string
	subscribeShareNameException string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) Execute() (*MsgVpnAclProfileSubscribeShareNameExceptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeShareNameExceptionExecute(r)
}

/*
GetMsgVpnAclProfileSubscribeShareNameException Get a Subscribe Share Name Exception object.

Get a Subscribe Share Name Exception object.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeShareNameException|x|||
subscribeShareNameExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param subscribeShareNameExceptionSyntax The syntax of the subscribe share name for the exception to the default action taken.
 @param subscribeShareNameException The subscribe share name exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeShareNameException(ctx context.Context, msgVpnName string, aclProfileName string, subscribeShareNameExceptionSyntax string, subscribeShareNameException string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		subscribeShareNameExceptionSyntax: subscribeShareNameExceptionSyntax,
		subscribeShareNameException: subscribeShareNameException,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeShareNameExceptionResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeShareNameExceptionExecute(r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) (*MsgVpnAclProfileSubscribeShareNameExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeShareNameExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileSubscribeShareNameException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions/{subscribeShareNameExceptionSyntax},{subscribeShareNameException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameExceptionSyntax"+"}", url.PathEscape(parameterToString(r.subscribeShareNameExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameException"+"}", url.PathEscape(parameterToString(r.subscribeShareNameException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Execute() (*MsgVpnAclProfileSubscribeShareNameExceptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeShareNameExceptionsExecute(r)
}

/*
GetMsgVpnAclProfileSubscribeShareNameExceptions Get a list of Subscribe Share Name Exception objects.

Get a list of Subscribe Share Name Exception objects.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeShareNameException|x|||
subscribeShareNameExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeShareNameExceptions(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeShareNameExceptionsResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeShareNameExceptionsExecute(r MsgVpnApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) (*MsgVpnAclProfileSubscribeShareNameExceptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeShareNameExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileSubscribeShareNameExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	subscribeTopicExceptionSyntax string
	subscribeTopicException string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) Execute() (*MsgVpnAclProfileSubscribeTopicExceptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeTopicExceptionExecute(r)
}

/*
GetMsgVpnAclProfileSubscribeTopicException Get a Subscribe Topic Exception object.

Get a Subscribe Topic Exception object.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeTopicException|x|||
subscribeTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @param subscribeTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 @param subscribeTopicException The topic for the exception to the default action taken. May include wildcard characters.
 @return MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeTopicException(ctx context.Context, msgVpnName string, aclProfileName string, subscribeTopicExceptionSyntax string, subscribeTopicException string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
		subscribeTopicExceptionSyntax: subscribeTopicExceptionSyntax,
		subscribeTopicException: subscribeTopicException,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeTopicExceptionResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeTopicExceptionExecute(r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) (*MsgVpnAclProfileSubscribeTopicExceptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileSubscribeTopicException")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions/{subscribeTopicExceptionSyntax},{subscribeTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicExceptionSyntax"+"}", url.PathEscape(parameterToString(r.subscribeTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicException"+"}", url.PathEscape(parameterToString(r.subscribeTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Execute() (*MsgVpnAclProfileSubscribeTopicExceptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeTopicExceptionsExecute(r)
}

/*
GetMsgVpnAclProfileSubscribeTopicExceptions Get a list of Subscribe Topic Exception objects.

Get a list of Subscribe Topic Exception objects.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeTopicException|x|||
subscribeTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeTopicExceptions(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	return MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileSubscribeTopicExceptionsResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfileSubscribeTopicExceptionsExecute(r MsgVpnApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) (*MsgVpnAclProfileSubscribeTopicExceptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileSubscribeTopicExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfileSubscribeTopicExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAclProfilesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAclProfilesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAclProfilesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAclProfilesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAclProfilesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAclProfilesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAclProfilesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAclProfilesRequest) Execute() (*MsgVpnAclProfilesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilesExecute(r)
}

/*
GetMsgVpnAclProfiles Get a list of ACL Profile objects.

Get a list of ACL Profile objects.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnAclProfilesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAclProfiles(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnAclProfilesRequest {
	return MsgVpnApiApiGetMsgVpnAclProfilesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfilesResponse
func (a *MsgVpnApiService) GetMsgVpnAclProfilesExecute(r MsgVpnApiApiGetMsgVpnAclProfilesRequest) (*MsgVpnAclProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAclProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest) Execute() (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProfileExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProfile Get an OAuth Profile object.

Get an OAuth Profile object.

OAuth profiles specify how to securely authenticate to an OAuth provider.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientSecret||x||x
msgVpnName|x|||
oauthProfileName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfile(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResponse
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileRequest) (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	clientRequiredClaimName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) Execute() (*MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProfileClientRequiredClaimExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProfileClientRequiredClaim Get a Required Claim object.

Get a Required Claim object.

Additional claims to be verified in the ID token.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientRequiredClaimName|x|||
msgVpnName|x|||
oauthProfileName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @param clientRequiredClaimName The name of the ID token claim to verify.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileClientRequiredClaim(ctx context.Context, msgVpnName string, oauthProfileName string, clientRequiredClaimName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
		clientRequiredClaimName: clientRequiredClaimName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileClientRequiredClaimExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimRequest) (*MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileClientRequiredClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProfileClientRequiredClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/clientRequiredClaims/{clientRequiredClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientRequiredClaimName"+"}", url.PathEscape(parameterToString(r.clientRequiredClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) Execute() (*MsgVpnAuthenticationOauthProfileClientRequiredClaimsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProfileClientRequiredClaimsExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProfileClientRequiredClaims Get a list of Required Claim objects.

Get a list of Required Claim objects.

Additional claims to be verified in the ID token.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientRequiredClaimName|x|||
msgVpnName|x|||
oauthProfileName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileClientRequiredClaims(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileClientRequiredClaimsResponse
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileClientRequiredClaimsExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileClientRequiredClaimsRequest) (*MsgVpnAuthenticationOauthProfileClientRequiredClaimsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileClientRequiredClaimsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProfileClientRequiredClaims")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/clientRequiredClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	resourceServerRequiredClaimName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) Execute() (*MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim Get a Required Claim object.

Get a Required Claim object.

Additional claims to be verified in the access token.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthProfileName|x|||
resourceServerRequiredClaimName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @param resourceServerRequiredClaimName The name of the access token claim to verify.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim(ctx context.Context, msgVpnName string, oauthProfileName string, resourceServerRequiredClaimName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
		resourceServerRequiredClaimName: resourceServerRequiredClaimName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimRequest) (*MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/resourceServerRequiredClaims/{resourceServerRequiredClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceServerRequiredClaimName"+"}", url.PathEscape(parameterToString(r.resourceServerRequiredClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) Execute() (*MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaims Get a list of Required Claim objects.

Get a list of Required Claim objects.

Additional claims to be verified in the access token.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthProfileName|x|||
resourceServerRequiredClaimName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaims(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsResponse
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsRequest) (*MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaims")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}/resourceServerRequiredClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) Execute() (*MsgVpnAuthenticationOauthProfilesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProfilesExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProfiles Get a list of OAuth Profile objects.

Get a list of OAuth Profile objects.

OAuth profiles specify how to securely authenticate to an OAuth provider.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientSecret||x||x
msgVpnName|x|||
oauthProfileName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfiles(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfilesResponse
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProfilesExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProfilesRequest) (*MsgVpnAuthenticationOauthProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProviderName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest) Execute() (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProvider Get an OAuth Provider object.

Get an OAuth Provider object.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
audienceClaimName|||x|
audienceClaimSource|||x|
audienceClaimValue|||x|
audienceValidationEnabled|||x|
authorizationGroupClaimName|||x|
authorizationGroupClaimSource|||x|
authorizationGroupEnabled|||x|
disconnectOnTokenExpirationEnabled|||x|
enabled|||x|
jwksRefreshInterval|||x|
jwksUri|||x|
msgVpnName|x||x|
oauthProviderName|x||x|
tokenIgnoreTimeLimitsEnabled|||x|
tokenIntrospectionParameterName|||x|
tokenIntrospectionPassword||x|x|x
tokenIntrospectionTimeout|||x|
tokenIntrospectionUri|||x|
tokenIntrospectionUsername|||x|
usernameClaimName|||x|
usernameClaimSource|||x|
usernameValidateEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.25. Replaced by authenticationOauthProfiles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProviderName The name of the OAuth Provider.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProvider(ctx context.Context, msgVpnName string, oauthProviderName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProviderResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProviderExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProviderRequest) (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", url.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Execute() (*MsgVpnAuthenticationOauthProvidersResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProvidersExecute(r)
}

/*
GetMsgVpnAuthenticationOauthProviders Get a list of OAuth Provider objects.

Get a list of OAuth Provider objects.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
audienceClaimName|||x|
audienceClaimSource|||x|
audienceClaimValue|||x|
audienceValidationEnabled|||x|
authorizationGroupClaimName|||x|
authorizationGroupClaimSource|||x|
authorizationGroupEnabled|||x|
disconnectOnTokenExpirationEnabled|||x|
enabled|||x|
jwksRefreshInterval|||x|
jwksUri|||x|
msgVpnName|x||x|
oauthProviderName|x||x|
tokenIgnoreTimeLimitsEnabled|||x|
tokenIntrospectionParameterName|||x|
tokenIntrospectionPassword||x|x|x
tokenIntrospectionTimeout|||x|
tokenIntrospectionUri|||x|
tokenIntrospectionUsername|||x|
usernameClaimName|||x|
usernameClaimSource|||x|
usernameValidateEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.25. Replaced by authenticationOauthProfiles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProviders(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	return MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProvidersResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnAuthenticationOauthProvidersExecute(r MsgVpnApiApiGetMsgVpnAuthenticationOauthProvidersRequest) (*MsgVpnAuthenticationOauthProvidersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProvidersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthenticationOauthProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	authorizationGroupName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest) Execute() (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthorizationGroupExecute(r)
}

/*
GetMsgVpnAuthorizationGroup Get an Authorization Group object.

Get an Authorization Group object.

To use client authorization groups configured on an external server to provide client authorizations, Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the external server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authorizationGroupName|x|||
msgVpnName|x|||
orderAfterAuthorizationGroupName||x||
orderBeforeAuthorizationGroupName||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param authorizationGroupName The name of the Authorization Group. For LDAP groups, special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 @return MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthorizationGroup(ctx context.Context, msgVpnName string, authorizationGroupName string) MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest {
	return MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthorizationGroupResponse
func (a *MsgVpnApiService) GetMsgVpnAuthorizationGroupExecute(r MsgVpnApiApiGetMsgVpnAuthorizationGroupRequest) (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", url.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) Execute() (*MsgVpnAuthorizationGroupsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnAuthorizationGroupsExecute(r)
}

/*
GetMsgVpnAuthorizationGroups Get a list of Authorization Group objects.

Get a list of Authorization Group objects.

To use client authorization groups configured on an external server to provide client authorizations, Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the external server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authorizationGroupName|x|||
msgVpnName|x|||
orderAfterAuthorizationGroupName||x||
orderBeforeAuthorizationGroupName||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnAuthorizationGroups(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest {
	return MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthorizationGroupsResponse
func (a *MsgVpnApiService) GetMsgVpnAuthorizationGroupsExecute(r MsgVpnApiApiGetMsgVpnAuthorizationGroupsRequest) (*MsgVpnAuthorizationGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthorizationGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnAuthorizationGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeRequest) Execute() (*MsgVpnBridgeResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeExecute(r)
}

/*
GetMsgVpnBridge Get a Bridge object.

Get a Bridge object.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteAuthenticationBasicPassword||x||x
remoteAuthenticationClientCertContent||x||x
remoteAuthenticationClientCertPassword||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiGetMsgVpnBridgeRequest
*/
func (a *MsgVpnApiService) GetMsgVpnBridge(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiGetMsgVpnBridgeRequest {
	return MsgVpnApiApiGetMsgVpnBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeResponse
func (a *MsgVpnApiService) GetMsgVpnBridgeExecute(r MsgVpnApiApiGetMsgVpnBridgeRequest) (*MsgVpnBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	remoteMsgVpnName string
	remoteMsgVpnLocation string
	remoteMsgVpnInterface string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) Execute() (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
GetMsgVpnBridgeRemoteMsgVpn Get a Remote Message VPN object.

Get a Remote Message VPN object.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
password||x||x
remoteMsgVpnInterface|x|||
remoteMsgVpnLocation|x|||
remoteMsgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param remoteMsgVpnName The name of the remote Message VPN.
 @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 @return MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteMsgVpn(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest {
	return MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		remoteMsgVpnName: remoteMsgVpnName,
		remoteMsgVpnLocation: remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteMsgVpnResponse
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteMsgVpnExecute(r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) Execute() (*MsgVpnBridgeRemoteMsgVpnsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteMsgVpnsExecute(r)
}

/*
GetMsgVpnBridgeRemoteMsgVpns Get a list of Remote Message VPN objects.

Get a list of Remote Message VPN objects.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
password||x||x
remoteMsgVpnInterface|x|||
remoteMsgVpnLocation|x|||
remoteMsgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteMsgVpns(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	return MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteMsgVpnsResponse
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteMsgVpnsExecute(r MsgVpnApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) (*MsgVpnBridgeRemoteMsgVpnsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteMsgVpnsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridgeRemoteMsgVpns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	remoteSubscriptionTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) Execute() (*MsgVpnBridgeRemoteSubscriptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteSubscriptionExecute(r)
}

/*
GetMsgVpnBridgeRemoteSubscription Get a Remote Subscription object.

Get a Remote Subscription object.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteSubscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param remoteSubscriptionTopic The topic of the Bridge remote subscription.
 @return MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteSubscription(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteSubscriptionTopic string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest {
	return MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		remoteSubscriptionTopic: remoteSubscriptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteSubscriptionResponse
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteSubscriptionExecute(r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) (*MsgVpnBridgeRemoteSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridgeRemoteSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteSubscriptionTopic"+"}", url.PathEscape(parameterToString(r.remoteSubscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Execute() (*MsgVpnBridgeRemoteSubscriptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteSubscriptionsExecute(r)
}

/*
GetMsgVpnBridgeRemoteSubscriptions Get a list of Remote Subscription objects.

Get a list of Remote Subscription objects.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteSubscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteSubscriptions(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	return MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteSubscriptionsResponse
func (a *MsgVpnApiService) GetMsgVpnBridgeRemoteSubscriptionsExecute(r MsgVpnApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) (*MsgVpnBridgeRemoteSubscriptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteSubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridgeRemoteSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	tlsTrustedCommonName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) Execute() (*MsgVpnBridgeTlsTrustedCommonNameResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeTlsTrustedCommonNameExecute(r)
}

/*
GetMsgVpnBridgeTlsTrustedCommonName Get a Trusted Common Name object.

Get a Trusted Common Name object.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x||x|
bridgeVirtualRouter|x||x|
msgVpnName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 @return MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnBridgeTlsTrustedCommonName(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, tlsTrustedCommonName string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest {
	return MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeTlsTrustedCommonNameResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnBridgeTlsTrustedCommonNameExecute(r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) (*MsgVpnBridgeTlsTrustedCommonNameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridgeTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", url.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) Execute() (*MsgVpnBridgeTlsTrustedCommonNamesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgeTlsTrustedCommonNamesExecute(r)
}

/*
GetMsgVpnBridgeTlsTrustedCommonNames Get a list of Trusted Common Name objects.

Get a list of Trusted Common Name objects.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x||x|
bridgeVirtualRouter|x||x|
msgVpnName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnBridgeTlsTrustedCommonNames(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	return MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeTlsTrustedCommonNamesResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnBridgeTlsTrustedCommonNamesExecute(r MsgVpnApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) (*MsgVpnBridgeTlsTrustedCommonNamesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridgeTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnBridgesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnBridgesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnBridgesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnBridgesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnBridgesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnBridgesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnBridgesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnBridgesRequest) Execute() (*MsgVpnBridgesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnBridgesExecute(r)
}

/*
GetMsgVpnBridges Get a list of Bridge objects.

Get a list of Bridge objects.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteAuthenticationBasicPassword||x||x
remoteAuthenticationClientCertContent||x||x
remoteAuthenticationClientCertPassword||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnBridgesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnBridges(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnBridgesRequest {
	return MsgVpnApiApiGetMsgVpnBridgesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnBridgesResponse
func (a *MsgVpnApiService) GetMsgVpnBridgesExecute(r MsgVpnApiApiGetMsgVpnBridgesRequest) (*MsgVpnBridgesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnBridges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnClientProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientProfileName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfileRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnClientProfileRequest) Execute() (*MsgVpnClientProfileResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnClientProfileExecute(r)
}

/*
GetMsgVpnClientProfile Get a Client Profile object.

Get a Client Profile object.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
allowCutThroughForwardingEnabled|||x|
apiQueueManagementCopyFromOnCreateName|||x|
apiTopicEndpointManagementCopyFromOnCreateName|||x|
clientProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientProfileName The name of the Client Profile.
 @return MsgVpnApiApiGetMsgVpnClientProfileRequest
*/
func (a *MsgVpnApiService) GetMsgVpnClientProfile(ctx context.Context, msgVpnName string, clientProfileName string) MsgVpnApiApiGetMsgVpnClientProfileRequest {
	return MsgVpnApiApiGetMsgVpnClientProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientProfileName: clientProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnClientProfileResponse
func (a *MsgVpnApiService) GetMsgVpnClientProfileExecute(r MsgVpnApiApiGetMsgVpnClientProfileRequest) (*MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", url.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnClientProfilesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfilesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnClientProfilesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfilesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnClientProfilesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfilesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnClientProfilesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfilesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnClientProfilesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientProfilesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnClientProfilesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnClientProfilesRequest) Execute() (*MsgVpnClientProfilesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnClientProfilesExecute(r)
}

/*
GetMsgVpnClientProfiles Get a list of Client Profile objects.

Get a list of Client Profile objects.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
allowCutThroughForwardingEnabled|||x|
apiQueueManagementCopyFromOnCreateName|||x|
apiTopicEndpointManagementCopyFromOnCreateName|||x|
clientProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnClientProfilesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnClientProfiles(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnClientProfilesRequest {
	return MsgVpnApiApiGetMsgVpnClientProfilesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnClientProfilesResponse
func (a *MsgVpnApiService) GetMsgVpnClientProfilesExecute(r MsgVpnApiApiGetMsgVpnClientProfilesRequest) (*MsgVpnClientProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnClientProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnClientUsernameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientUsername string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernameRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnClientUsernameRequest) Execute() (*MsgVpnClientUsernameResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnClientUsernameExecute(r)
}

/*
GetMsgVpnClientUsername Get a Client Username object.

Get a Client Username object.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientUsername|x|||
msgVpnName|x|||
password||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientUsername The name of the Client Username.
 @return MsgVpnApiApiGetMsgVpnClientUsernameRequest
*/
func (a *MsgVpnApiService) GetMsgVpnClientUsername(ctx context.Context, msgVpnName string, clientUsername string) MsgVpnApiApiGetMsgVpnClientUsernameRequest {
	return MsgVpnApiApiGetMsgVpnClientUsernameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientUsername: clientUsername,
	}
}

// Execute executes the request
//  @return MsgVpnClientUsernameResponse
func (a *MsgVpnApiService) GetMsgVpnClientUsernameExecute(r MsgVpnApiApiGetMsgVpnClientUsernameRequest) (*MsgVpnClientUsernameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", url.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnClientUsernamesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnClientUsernamesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnClientUsernamesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnClientUsernamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnClientUsernamesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnClientUsernamesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) Execute() (*MsgVpnClientUsernamesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnClientUsernamesExecute(r)
}

/*
GetMsgVpnClientUsernames Get a list of Client Username objects.

Get a list of Client Username objects.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientUsername|x|||
msgVpnName|x|||
password||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnClientUsernamesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnClientUsernames(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnClientUsernamesRequest {
	return MsgVpnApiApiGetMsgVpnClientUsernamesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnClientUsernamesResponse
func (a *MsgVpnApiService) GetMsgVpnClientUsernamesExecute(r MsgVpnApiApiGetMsgVpnClientUsernamesRequest) (*MsgVpnClientUsernamesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientUsernamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnClientUsernames")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheRequest) Execute() (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheExecute(r)
}

/*
GetMsgVpnDistributedCache Get a Distributed Cache object.

Get a Distributed Cache object.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiGetMsgVpnDistributedCacheRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheRequest) (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest) Execute() (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterExecute(r)
}

/*
GetMsgVpnDistributedCacheCluster Get a Cache Cluster object.

Get a Cache Cluster object.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterRequest) (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	homeClusterName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Execute() (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterGlobalCachingHomeCluster Get a Home Cache Cluster object.

Get a Home Cache Cluster object.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param homeClusterName The name of the remote Home Cache Cluster.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		homeClusterName: homeClusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", url.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	homeClusterName string
	topicPrefix string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Execute() (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix Get a Topic Prefix object.

Get a Topic Prefix object.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||
topicPrefix|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param homeClusterName The name of the remote Home Cache Cluster.
 @param topicPrefix A topic prefix for global topics available from the remote Home Cache Cluster. A wildcard (/>) is implied at the end of the prefix.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(ctx context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string, topicPrefix string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		homeClusterName: homeClusterName,
		topicPrefix: topicPrefix,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes/{topicPrefix}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", url.PathEscape(parameterToString(r.homeClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicPrefix"+"}", url.PathEscape(parameterToString(r.topicPrefix, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	homeClusterName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Execute() (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes Get a list of Topic Prefix objects.

Get a list of Topic Prefix objects.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||
topicPrefix|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param homeClusterName The name of the remote Home Cache Cluster.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes(ctx context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		homeClusterName: homeClusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) (*MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", url.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Execute() (*MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusters Get a list of Home Cache Cluster objects.

Get a list of Home Cache Cluster objects.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusters(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) (*MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	instanceName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) Execute() (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterInstance Get a Cache Instance object.

Get a Cache Instance object.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
instanceName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param instanceName The name of the Cache Instance.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterInstance(ctx context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		instanceName: instanceName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterInstanceResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterInstanceExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", url.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Execute() (*MsgVpnDistributedCacheClusterInstancesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterInstancesExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterInstances Get a list of Cache Instance objects.

Get a list of Cache Instance objects.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
instanceName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterInstances(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterInstancesResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterInstancesExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) (*MsgVpnDistributedCacheClusterInstancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	topic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest) Execute() (*MsgVpnDistributedCacheClusterTopicResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterTopicExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterTopic Get a Topic object.

Get a Topic object.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||
topic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param topic The value of the Topic in the form a/b/c.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterTopic(ctx context.Context, msgVpnName string, cacheName string, clusterName string, topic string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		topic: topic,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterTopicResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterTopicExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicRequest) (*MsgVpnDistributedCacheClusterTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics/{topic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topic"+"}", url.PathEscape(parameterToString(r.topic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Execute() (*MsgVpnDistributedCacheClusterTopicsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterTopicsExecute(r)
}

/*
GetMsgVpnDistributedCacheClusterTopics Get a list of Topic objects.

Get a list of Topic objects.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||
topic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterTopics(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterTopicsResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusterTopicsExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) (*MsgVpnDistributedCacheClusterTopicsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusterTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) Execute() (*MsgVpnDistributedCacheClustersResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClustersExecute(r)
}

/*
GetMsgVpnDistributedCacheClusters Get a list of Cache Cluster objects.

Get a list of Cache Cluster objects.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @return MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClusters(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClustersResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCacheClustersExecute(r MsgVpnApiApiGetMsgVpnDistributedCacheClustersRequest) (*MsgVpnDistributedCacheClustersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCacheClusters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDistributedCachesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDistributedCachesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDistributedCachesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDistributedCachesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDistributedCachesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDistributedCachesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) Execute() (*MsgVpnDistributedCachesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCachesExecute(r)
}

/*
GetMsgVpnDistributedCaches Get a list of Distributed Cache objects.

Get a list of Distributed Cache objects.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnDistributedCachesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDistributedCaches(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnDistributedCachesRequest {
	return MsgVpnApiApiGetMsgVpnDistributedCachesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCachesResponse
func (a *MsgVpnApiService) GetMsgVpnDistributedCachesExecute(r MsgVpnApiApiGetMsgVpnDistributedCachesRequest) (*MsgVpnDistributedCachesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCachesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDistributedCaches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDmrBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	remoteNodeName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgeRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDmrBridgeRequest) Execute() (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDmrBridgeExecute(r)
}

/*
GetMsgVpnDmrBridge Get a DMR Bridge object.

Get a DMR Bridge object.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 @return MsgVpnApiApiGetMsgVpnDmrBridgeRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDmrBridge(ctx context.Context, msgVpnName string, remoteNodeName string) MsgVpnApiApiGetMsgVpnDmrBridgeRequest {
	return MsgVpnApiApiGetMsgVpnDmrBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

// Execute executes the request
//  @return MsgVpnDmrBridgeResponse
func (a *MsgVpnApiService) GetMsgVpnDmrBridgeExecute(r MsgVpnApiApiGetMsgVpnDmrBridgeRequest) (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", url.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnDmrBridgesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnDmrBridgesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnDmrBridgesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnDmrBridgesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnDmrBridgesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnDmrBridgesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) Execute() (*MsgVpnDmrBridgesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnDmrBridgesExecute(r)
}

/*
GetMsgVpnDmrBridges Get a list of DMR Bridge objects.

Get a list of DMR Bridge objects.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnDmrBridgesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnDmrBridges(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnDmrBridgesRequest {
	return MsgVpnApiApiGetMsgVpnDmrBridgesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnDmrBridgesResponse
func (a *MsgVpnApiService) GetMsgVpnDmrBridgesExecute(r MsgVpnApiApiGetMsgVpnDmrBridgesRequest) (*MsgVpnDmrBridgesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDmrBridgesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnDmrBridges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) Execute() (*MsgVpnJndiConnectionFactoriesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnJndiConnectionFactoriesExecute(r)
}

/*
GetMsgVpnJndiConnectionFactories Get a list of JNDI Connection Factory objects.

Get a list of JNDI Connection Factory objects.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
connectionFactoryName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnJndiConnectionFactories(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	return MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiConnectionFactoriesResponse
func (a *MsgVpnApiService) GetMsgVpnJndiConnectionFactoriesExecute(r MsgVpnApiApiGetMsgVpnJndiConnectionFactoriesRequest) (*MsgVpnJndiConnectionFactoriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiConnectionFactoriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnJndiConnectionFactories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	connectionFactoryName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest) Execute() (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnJndiConnectionFactoryExecute(r)
}

/*
GetMsgVpnJndiConnectionFactory Get a JNDI Connection Factory object.

Get a JNDI Connection Factory object.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
connectionFactoryName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param connectionFactoryName The name of the JMS Connection Factory.
 @return MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest
*/
func (a *MsgVpnApiService) GetMsgVpnJndiConnectionFactory(ctx context.Context, msgVpnName string, connectionFactoryName string) MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest {
	return MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiConnectionFactoryResponse
func (a *MsgVpnApiService) GetMsgVpnJndiConnectionFactoryExecute(r MsgVpnApiApiGetMsgVpnJndiConnectionFactoryRequest) (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", url.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnJndiQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueueRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnJndiQueueRequest) Execute() (*MsgVpnJndiQueueResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnJndiQueueExecute(r)
}

/*
GetMsgVpnJndiQueue Get a JNDI Queue object.

Get a JNDI Queue object.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The JNDI name of the JMS Queue.
 @return MsgVpnApiApiGetMsgVpnJndiQueueRequest
*/
func (a *MsgVpnApiService) GetMsgVpnJndiQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiGetMsgVpnJndiQueueRequest {
	return MsgVpnApiApiGetMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiQueueResponse
func (a *MsgVpnApiService) GetMsgVpnJndiQueueExecute(r MsgVpnApiApiGetMsgVpnJndiQueueRequest) (*MsgVpnJndiQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnJndiQueuesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnJndiQueuesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnJndiQueuesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnJndiQueuesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnJndiQueuesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnJndiQueuesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) Execute() (*MsgVpnJndiQueuesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnJndiQueuesExecute(r)
}

/*
GetMsgVpnJndiQueues Get a list of JNDI Queue objects.

Get a list of JNDI Queue objects.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnJndiQueuesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnJndiQueues(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnJndiQueuesRequest {
	return MsgVpnApiApiGetMsgVpnJndiQueuesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiQueuesResponse
func (a *MsgVpnApiService) GetMsgVpnJndiQueuesExecute(r MsgVpnApiApiGetMsgVpnJndiQueuesRequest) (*MsgVpnJndiQueuesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiQueuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnJndiQueues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnJndiTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnJndiTopicRequest) Execute() (*MsgVpnJndiTopicResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnJndiTopicExecute(r)
}

/*
GetMsgVpnJndiTopic Get a JNDI Topic object.

Get a JNDI Topic object.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicName The JNDI name of the JMS Topic.
 @return MsgVpnApiApiGetMsgVpnJndiTopicRequest
*/
func (a *MsgVpnApiService) GetMsgVpnJndiTopic(ctx context.Context, msgVpnName string, topicName string) MsgVpnApiApiGetMsgVpnJndiTopicRequest {
	return MsgVpnApiApiGetMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicName: topicName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiTopicResponse
func (a *MsgVpnApiService) GetMsgVpnJndiTopicExecute(r MsgVpnApiApiGetMsgVpnJndiTopicRequest) (*MsgVpnJndiTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", url.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnJndiTopicsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnJndiTopicsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnJndiTopicsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnJndiTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnJndiTopicsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnJndiTopicsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) Execute() (*MsgVpnJndiTopicsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnJndiTopicsExecute(r)
}

/*
GetMsgVpnJndiTopics Get a list of JNDI Topic objects.

Get a list of JNDI Topic objects.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnJndiTopicsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnJndiTopics(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnJndiTopicsRequest {
	return MsgVpnApiApiGetMsgVpnJndiTopicsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiTopicsResponse
func (a *MsgVpnApiService) GetMsgVpnJndiTopicsExecute(r MsgVpnApiApiGetMsgVpnJndiTopicsRequest) (*MsgVpnJndiTopicsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnJndiTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest) Execute() (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnMqttRetainCacheExecute(r)
}

/*
GetMsgVpnMqttRetainCache Get an MQTT Retain Cache object.

Get an MQTT Retain Cache object.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the MQTT Retain Cache.
 @return MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest
*/
func (a *MsgVpnApiService) GetMsgVpnMqttRetainCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest {
	return MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttRetainCacheResponse
func (a *MsgVpnApiService) GetMsgVpnMqttRetainCacheExecute(r MsgVpnApiApiGetMsgVpnMqttRetainCacheRequest) (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) Execute() (*MsgVpnMqttRetainCachesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnMqttRetainCachesExecute(r)
}

/*
GetMsgVpnMqttRetainCaches Get a list of MQTT Retain Cache objects.

Get a list of MQTT Retain Cache objects.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnMqttRetainCaches(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest {
	return MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttRetainCachesResponse
func (a *MsgVpnApiService) GetMsgVpnMqttRetainCachesExecute(r MsgVpnApiApiGetMsgVpnMqttRetainCachesRequest) (*MsgVpnMqttRetainCachesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttRetainCachesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnMqttRetainCaches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnMqttSessionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnMqttSessionRequest) Execute() (*MsgVpnMqttSessionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionExecute(r)
}

/*
GetMsgVpnMqttSession Get an MQTT Session object.

Get an MQTT Session object.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @return MsgVpnApiApiGetMsgVpnMqttSessionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnMqttSession(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) MsgVpnApiApiGetMsgVpnMqttSessionRequest {
	return MsgVpnApiApiGetMsgVpnMqttSessionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionResponse
func (a *MsgVpnApiService) GetMsgVpnMqttSessionExecute(r MsgVpnApiApiGetMsgVpnMqttSessionRequest) (*MsgVpnMqttSessionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	subscriptionTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest) Execute() (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
GetMsgVpnMqttSessionSubscription Get a Subscription object.

Get a Subscription object.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @param subscriptionTopic The MQTT subscription topic.
 @return MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnMqttSessionSubscription(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest {
	return MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic: subscriptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionSubscriptionResponse
func (a *MsgVpnApiService) GetMsgVpnMqttSessionSubscriptionExecute(r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionRequest) (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", url.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Execute() (*MsgVpnMqttSessionSubscriptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionSubscriptionsExecute(r)
}

/*
GetMsgVpnMqttSessionSubscriptions Get a list of Subscription objects.

Get a list of Subscription objects.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @return MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnMqttSessionSubscriptions(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	return MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionSubscriptionsResponse
func (a *MsgVpnApiService) GetMsgVpnMqttSessionSubscriptionsExecute(r MsgVpnApiApiGetMsgVpnMqttSessionSubscriptionsRequest) (*MsgVpnMqttSessionSubscriptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionSubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnMqttSessionSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnMqttSessionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnMqttSessionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnMqttSessionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnMqttSessionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnMqttSessionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnMqttSessionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) Execute() (*MsgVpnMqttSessionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionsExecute(r)
}

/*
GetMsgVpnMqttSessions Get a list of MQTT Session objects.

Get a list of MQTT Session objects.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnMqttSessionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnMqttSessions(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnMqttSessionsRequest {
	return MsgVpnApiApiGetMsgVpnMqttSessionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionsResponse
func (a *MsgVpnApiService) GetMsgVpnMqttSessionsExecute(r MsgVpnApiApiGetMsgVpnMqttSessionsRequest) (*MsgVpnMqttSessionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnMqttSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnQueueRequest) Execute() (*MsgVpnQueueResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnQueueExecute(r)
}

/*
GetMsgVpnQueue Get a Queue object.

Get a Queue object.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @return MsgVpnApiApiGetMsgVpnQueueRequest
*/
func (a *MsgVpnApiService) GetMsgVpnQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiGetMsgVpnQueueRequest {
	return MsgVpnApiApiGetMsgVpnQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueResponse
func (a *MsgVpnApiService) GetMsgVpnQueueExecute(r MsgVpnApiApiGetMsgVpnQueueRequest) (*MsgVpnQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	subscriptionTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest) Execute() (*MsgVpnQueueSubscriptionResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnQueueSubscriptionExecute(r)
}

/*
GetMsgVpnQueueSubscription Get a Queue Subscription object.

Get a Queue Subscription object.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @param subscriptionTopic The topic of the Subscription.
 @return MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest
*/
func (a *MsgVpnApiService) GetMsgVpnQueueSubscription(ctx context.Context, msgVpnName string, queueName string, subscriptionTopic string) MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest {
	return MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
		subscriptionTopic: subscriptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnQueueSubscriptionResponse
func (a *MsgVpnApiService) GetMsgVpnQueueSubscriptionExecute(r MsgVpnApiApiGetMsgVpnQueueSubscriptionRequest) (*MsgVpnQueueSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnQueueSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", url.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) Execute() (*MsgVpnQueueSubscriptionsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnQueueSubscriptionsExecute(r)
}

/*
GetMsgVpnQueueSubscriptions Get a list of Queue Subscription objects.

Get a list of Queue Subscription objects.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @return MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnQueueSubscriptions(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest {
	return MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueSubscriptionsResponse
func (a *MsgVpnApiService) GetMsgVpnQueueSubscriptionsExecute(r MsgVpnApiApiGetMsgVpnQueueSubscriptionsRequest) (*MsgVpnQueueSubscriptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueSubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnQueueSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnQueueTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueTemplateName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplateRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnQueueTemplateRequest) Execute() (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnQueueTemplateExecute(r)
}

/*
GetMsgVpnQueueTemplate Get a Queue Template object.

Get a Queue Template object.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueTemplateName The name of the Queue Template.
 @return MsgVpnApiApiGetMsgVpnQueueTemplateRequest
*/
func (a *MsgVpnApiService) GetMsgVpnQueueTemplate(ctx context.Context, msgVpnName string, queueTemplateName string) MsgVpnApiApiGetMsgVpnQueueTemplateRequest {
	return MsgVpnApiApiGetMsgVpnQueueTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueTemplateResponse
func (a *MsgVpnApiService) GetMsgVpnQueueTemplateExecute(r MsgVpnApiApiGetMsgVpnQueueTemplateRequest) (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", url.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnQueueTemplatesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnQueueTemplatesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnQueueTemplatesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnQueueTemplatesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnQueueTemplatesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnQueueTemplatesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) Execute() (*MsgVpnQueueTemplatesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnQueueTemplatesExecute(r)
}

/*
GetMsgVpnQueueTemplates Get a list of Queue Template objects.

Get a list of Queue Template objects.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnQueueTemplatesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnQueueTemplates(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnQueueTemplatesRequest {
	return MsgVpnApiApiGetMsgVpnQueueTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueTemplatesResponse
func (a *MsgVpnApiService) GetMsgVpnQueueTemplatesExecute(r MsgVpnApiApiGetMsgVpnQueueTemplatesRequest) (*MsgVpnQueueTemplatesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueTemplatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnQueueTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnQueuesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueuesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnQueuesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueuesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnQueuesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueuesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnQueuesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueuesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnQueuesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnQueuesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnQueuesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnQueuesRequest) Execute() (*MsgVpnQueuesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnQueuesExecute(r)
}

/*
GetMsgVpnQueues Get a list of Queue objects.

Get a list of Queue objects.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnQueuesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnQueues(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnQueuesRequest {
	return MsgVpnApiApiGetMsgVpnQueuesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnQueuesResponse
func (a *MsgVpnApiService) GetMsgVpnQueuesExecute(r MsgVpnApiApiGetMsgVpnQueuesRequest) (*MsgVpnQueuesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnQueues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnReplayLogRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replayLogName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnReplayLogRequest) Execute() (*MsgVpnReplayLogResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnReplayLogExecute(r)
}

/*
GetMsgVpnReplayLog Get a Replay Log object.

Get a Replay Log object.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replayLogName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.10.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replayLogName The name of the Replay Log.
 @return MsgVpnApiApiGetMsgVpnReplayLogRequest
*/
func (a *MsgVpnApiService) GetMsgVpnReplayLog(ctx context.Context, msgVpnName string, replayLogName string) MsgVpnApiApiGetMsgVpnReplayLogRequest {
	return MsgVpnApiApiGetMsgVpnReplayLogRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replayLogName: replayLogName,
	}
}

// Execute executes the request
//  @return MsgVpnReplayLogResponse
func (a *MsgVpnApiService) GetMsgVpnReplayLogExecute(r MsgVpnApiApiGetMsgVpnReplayLogRequest) (*MsgVpnReplayLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", url.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnReplayLogsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnReplayLogsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnReplayLogsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnReplayLogsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnReplayLogsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplayLogsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnReplayLogsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnReplayLogsRequest) Execute() (*MsgVpnReplayLogsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnReplayLogsExecute(r)
}

/*
GetMsgVpnReplayLogs Get a list of Replay Log objects.

Get a list of Replay Log objects.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replayLogName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.10.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnReplayLogsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnReplayLogs(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnReplayLogsRequest {
	return MsgVpnApiApiGetMsgVpnReplayLogsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnReplayLogsResponse
func (a *MsgVpnApiService) GetMsgVpnReplayLogsExecute(r MsgVpnApiApiGetMsgVpnReplayLogsRequest) (*MsgVpnReplayLogsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplayLogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnReplayLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnReplicatedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replicatedTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnReplicatedTopicRequest) Execute() (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnReplicatedTopicExecute(r)
}

/*
GetMsgVpnReplicatedTopic Get a Replicated Topic object.

Get a Replicated Topic object.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replicatedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 @return MsgVpnApiApiGetMsgVpnReplicatedTopicRequest
*/
func (a *MsgVpnApiService) GetMsgVpnReplicatedTopic(ctx context.Context, msgVpnName string, replicatedTopic string) MsgVpnApiApiGetMsgVpnReplicatedTopicRequest {
	return MsgVpnApiApiGetMsgVpnReplicatedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

// Execute executes the request
//  @return MsgVpnReplicatedTopicResponse
func (a *MsgVpnApiService) GetMsgVpnReplicatedTopicExecute(r MsgVpnApiApiGetMsgVpnReplicatedTopicRequest) (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", url.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) Execute() (*MsgVpnReplicatedTopicsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnReplicatedTopicsExecute(r)
}

/*
GetMsgVpnReplicatedTopics Get a list of Replicated Topic objects.

Get a list of Replicated Topic objects.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replicatedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnReplicatedTopics(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest {
	return MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnReplicatedTopicsResponse
func (a *MsgVpnApiService) GetMsgVpnReplicatedTopicsExecute(r MsgVpnApiApiGetMsgVpnReplicatedTopicsRequest) (*MsgVpnReplicatedTopicsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplicatedTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnReplicatedTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest) Execute() (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointExecute(r)
}

/*
GetMsgVpnRestDeliveryPoint Get a REST Delivery Point object.

Get a REST Delivery Point object.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPoint(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRequest) (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
GetMsgVpnRestDeliveryPointQueueBinding Get a Queue Binding object.

Get a Queue Binding object.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueBindingName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBinding(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindingExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	headerName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r)
}

/*
GetMsgVpnRestDeliveryPointQueueBindingRequestHeader Get a Request Header object.

Get a Request Header object.

A request header to be added to the HTTP request.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
headerName|x|||
msgVpnName|x|||
queueBindingName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.23.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @param headerName The name of the HTTP request header.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindingRequestHeader(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string, headerName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
		headerName: headerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointQueueBindingRequestHeader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}/requestHeaders/{headerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"headerName"+"}", url.PathEscape(parameterToString(r.headerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) Count(count int32) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) Where(where []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingRequestHeadersResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointQueueBindingRequestHeadersExecute(r)
}

/*
GetMsgVpnRestDeliveryPointQueueBindingRequestHeaders Get a list of Request Header objects.

Get a list of Request Header objects.

A request header to be added to the HTTP request.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
headerName|x|||
msgVpnName|x|||
queueBindingName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.23.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindingRequestHeaders(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingRequestHeadersResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindingRequestHeadersExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingRequestHeadersRequest) (*MsgVpnRestDeliveryPointQueueBindingRequestHeadersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingRequestHeadersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointQueueBindingRequestHeaders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}/requestHeaders"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointQueueBindingsExecute(r)
}

/*
GetMsgVpnRestDeliveryPointQueueBindings Get a list of Queue Binding objects.

Get a list of Queue Binding objects.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueBindingName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindings(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingsResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointQueueBindingsExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) (*MsgVpnRestDeliveryPointQueueBindingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointQueueBindings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
GetMsgVpnRestDeliveryPointRestConsumer Get a REST Consumer object.

Get a REST Consumer object.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationAwsSecretAccessKey||x||x
authenticationClientCertContent||x||x
authenticationClientCertPassword||x||
authenticationHttpBasicPassword||x||x
authenticationHttpHeaderValue||x||x
authenticationOauthClientSecret||x||x
authenticationOauthJwtSecretKey||x||x
msgVpnName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumer(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	oauthJwtClaimName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r)
}

/*
GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim Get a Claim object.

Get a Claim object.

A Claim is added to the JWT sent to the OAuth token request endpoint.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthJwtClaimName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.21.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @param oauthJwtClaimName The name of the additional claim. Cannot be \"exp\", \"iat\", or \"jti\".
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, oauthJwtClaimName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
		oauthJwtClaimName: oauthJwtClaimName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) (*MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims/{oauthJwtClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthJwtClaimName"+"}", url.PathEscape(parameterToString(r.oauthJwtClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsExecute(r)
}

/*
GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaims Get a list of Claim objects.

Get a list of Claim objects.

A Claim is added to the JWT sent to the OAuth token request endpoint.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthJwtClaimName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.21.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaims(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) (*MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaims")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	tlsTrustedCommonName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r)
}

/*
GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName Get a Trusted Common Name object.

Get a Trusted Common Name object.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x||x|
restConsumerName|x||x|
restDeliveryPointName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, tlsTrustedCommonName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) (*MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", url.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesExecute(r)
}

/*
GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames Get a list of Trusted Common Name objects.

Get a list of Trusted Common Name objects.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x||x|
restConsumerName|x||x|
restDeliveryPointName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest

Deprecated
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse
// Deprecated
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) (*MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Count(count int32) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Where(where []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumersResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumersExecute(r)
}

/*
GetMsgVpnRestDeliveryPointRestConsumers Get a list of REST Consumer objects.

Get a list of REST Consumer objects.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationAwsSecretAccessKey||x||x
authenticationClientCertContent||x||x
authenticationClientCertPassword||x||
authenticationHttpBasicPassword||x||x
authenticationHttpHeaderValue||x||x
authenticationOauthClientSecret||x||x
authenticationOauthJwtSecretKey||x||x
msgVpnName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumers(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumersResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointRestConsumersExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) (*MsgVpnRestDeliveryPointRestConsumersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPointRestConsumers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) Execute() (*MsgVpnRestDeliveryPointsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointsExecute(r)
}

/*
GetMsgVpnRestDeliveryPoints Get a list of REST Delivery Point objects.

Get a list of REST Delivery Point objects.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPoints(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest {
	return MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointsResponse
func (a *MsgVpnApiService) GetMsgVpnRestDeliveryPointsExecute(r MsgVpnApiApiGetMsgVpnRestDeliveryPointsRequest) (*MsgVpnRestDeliveryPointsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnRestDeliveryPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnSequencedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	sequencedTopic string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnSequencedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnSequencedTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnSequencedTopicRequest) Execute() (*MsgVpnSequencedTopicResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnSequencedTopicExecute(r)
}

/*
GetMsgVpnSequencedTopic Get a Sequenced Topic object.

Get a Sequenced Topic object.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
sequencedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param sequencedTopic Topic for applying sequence numbers.
 @return MsgVpnApiApiGetMsgVpnSequencedTopicRequest
*/
func (a *MsgVpnApiService) GetMsgVpnSequencedTopic(ctx context.Context, msgVpnName string, sequencedTopic string) MsgVpnApiApiGetMsgVpnSequencedTopicRequest {
	return MsgVpnApiApiGetMsgVpnSequencedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		sequencedTopic: sequencedTopic,
	}
}

// Execute executes the request
//  @return MsgVpnSequencedTopicResponse
func (a *MsgVpnApiService) GetMsgVpnSequencedTopicExecute(r MsgVpnApiApiGetMsgVpnSequencedTopicRequest) (*MsgVpnSequencedTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnSequencedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnSequencedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sequencedTopic"+"}", url.PathEscape(parameterToString(r.sequencedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnSequencedTopicsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnSequencedTopicsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnSequencedTopicsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnSequencedTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnSequencedTopicsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnSequencedTopicsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) Execute() (*MsgVpnSequencedTopicsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnSequencedTopicsExecute(r)
}

/*
GetMsgVpnSequencedTopics Get a list of Sequenced Topic objects.

Get a list of Sequenced Topic objects.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
sequencedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnSequencedTopicsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnSequencedTopics(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnSequencedTopicsRequest {
	return MsgVpnApiApiGetMsgVpnSequencedTopicsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnSequencedTopicsResponse
func (a *MsgVpnApiService) GetMsgVpnSequencedTopicsExecute(r MsgVpnApiApiGetMsgVpnSequencedTopicsRequest) (*MsgVpnSequencedTopicsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnSequencedTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnSequencedTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnTopicEndpointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnTopicEndpointRequest) Execute() (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointExecute(r)
}

/*
GetMsgVpnTopicEndpoint Get a Topic Endpoint object.

Get a Topic Endpoint object.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointName The name of the Topic Endpoint.
 @return MsgVpnApiApiGetMsgVpnTopicEndpointRequest
*/
func (a *MsgVpnApiService) GetMsgVpnTopicEndpoint(ctx context.Context, msgVpnName string, topicEndpointName string) MsgVpnApiApiGetMsgVpnTopicEndpointRequest {
	return MsgVpnApiApiGetMsgVpnTopicEndpointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointResponse
func (a *MsgVpnApiService) GetMsgVpnTopicEndpointExecute(r MsgVpnApiApiGetMsgVpnTopicEndpointRequest) (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", url.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointTemplateName string
	opaquePassword *string
	select_ *[]string
}

// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest) Execute() (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointTemplateExecute(r)
}

/*
GetMsgVpnTopicEndpointTemplate Get a Topic Endpoint Template object.

Get a Topic Endpoint Template object.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 @return MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest
*/
func (a *MsgVpnApiService) GetMsgVpnTopicEndpointTemplate(ctx context.Context, msgVpnName string, topicEndpointTemplateName string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest {
	return MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointTemplateResponse
func (a *MsgVpnApiService) GetMsgVpnTopicEndpointTemplateExecute(r MsgVpnApiApiGetMsgVpnTopicEndpointTemplateRequest) (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", url.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) Count(count int32) MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) Where(where []string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) Execute() (*MsgVpnTopicEndpointTemplatesResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointTemplatesExecute(r)
}

/*
GetMsgVpnTopicEndpointTemplates Get a list of Topic Endpoint Template objects.

Get a list of Topic Endpoint Template objects.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest
*/
func (a *MsgVpnApiService) GetMsgVpnTopicEndpointTemplates(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	return MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointTemplatesResponse
func (a *MsgVpnApiService) GetMsgVpnTopicEndpointTemplatesExecute(r MsgVpnApiApiGetMsgVpnTopicEndpointTemplatesRequest) (*MsgVpnTopicEndpointTemplatesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointTemplatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnTopicEndpointTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnTopicEndpointsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnTopicEndpointsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnTopicEndpointsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnTopicEndpointsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnTopicEndpointsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnTopicEndpointsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) Execute() (*MsgVpnTopicEndpointsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointsExecute(r)
}

/*
GetMsgVpnTopicEndpoints Get a list of Topic Endpoint objects.

Get a list of Topic Endpoint objects.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiGetMsgVpnTopicEndpointsRequest
*/
func (a *MsgVpnApiService) GetMsgVpnTopicEndpoints(ctx context.Context, msgVpnName string) MsgVpnApiApiGetMsgVpnTopicEndpointsRequest {
	return MsgVpnApiApiGetMsgVpnTopicEndpointsRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointsResponse
func (a *MsgVpnApiService) GetMsgVpnTopicEndpointsExecute(r MsgVpnApiApiGetMsgVpnTopicEndpointsRequest) (*MsgVpnTopicEndpointsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpnTopicEndpoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiGetMsgVpnsRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	count *int32
	cursor *string
	opaquePassword *string
	where *[]string
	select_ *[]string
}

// Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnsRequest) Count(count int32) MsgVpnApiApiGetMsgVpnsRequest {
	r.count = &count
	return r
}
// The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnsRequest) Cursor(cursor string) MsgVpnApiApiGetMsgVpnsRequest {
	r.cursor = &cursor
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnsRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiGetMsgVpnsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnsRequest) Where(where []string) MsgVpnApiApiGetMsgVpnsRequest {
	r.where = &where
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiGetMsgVpnsRequest) Select_(select_ []string) MsgVpnApiApiGetMsgVpnsRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiGetMsgVpnsRequest) Execute() (*MsgVpnsResponse, *http.Response, error) {
	return r.ApiService.GetMsgVpnsExecute(r)
}

/*
GetMsgVpns Get a list of Message VPN objects.

Get a list of Message VPN objects.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationOauthDefaultProviderName|||x|
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||x|
msgVpnName|x|||
replicationBridgeAuthenticationBasicPassword||x||x
replicationBridgeAuthenticationClientCertContent||x||x
replicationBridgeAuthenticationClientCertPassword||x||
replicationEnabledQueueBehavior||x||
restTlsServerCertEnforceTrustedCommonNameEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MsgVpnApiApiGetMsgVpnsRequest
*/
func (a *MsgVpnApiService) GetMsgVpns(ctx context.Context) MsgVpnApiApiGetMsgVpnsRequest {
	return MsgVpnApiApiGetMsgVpnsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MsgVpnsResponse
func (a *MsgVpnApiService) GetMsgVpnsExecute(r MsgVpnApiApiGetMsgVpnsRequest) (*MsgVpnsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.GetMsgVpns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpn
	opaquePassword *string
	select_ *[]string
}

// The Message VPN object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnRequest) Body(body MsgVpn) MsgVpnApiApiReplaceMsgVpnRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnRequest) Execute() (*MsgVpnResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnExecute(r)
}

/*
ReplaceMsgVpn Replace a Message VPN object.

Replace a Message VPN object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationOauthDefaultProviderName|||||x|
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||||x|
msgVpnName|x|x||||
replicationBridgeAuthenticationBasicPassword|||x|||x
replicationBridgeAuthenticationClientCertContent|||x|||x
replicationBridgeAuthenticationClientCertPassword|||x|||
replicationEnabledQueueBehavior|||x|||
restTlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
alias|global/read-write
authenticationBasicEnabled|global/read-write
authenticationBasicProfileName|global/read-write
authenticationBasicRadiusDomain|global/read-write
authenticationBasicType|global/read-write
authenticationClientCertAllowApiProvidedUsernameEnabled|global/read-write
authenticationClientCertEnabled|global/read-write
authenticationClientCertMaxChainDepth|global/read-write
authenticationClientCertRevocationCheckMode|global/read-write
authenticationClientCertUsernameSource|global/read-write
authenticationClientCertValidateDateEnabled|global/read-write
authenticationKerberosAllowApiProvidedUsernameEnabled|global/read-write
authenticationKerberosEnabled|global/read-write
authenticationOauthEnabled|global/read-write
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
bridgingTlsServerCertMaxChainDepth|global/read-write
bridgingTlsServerCertValidateDateEnabled|global/read-write
bridgingTlsServerCertValidateNameEnabled|global/read-write
dmrEnabled|global/read-write
exportSubscriptionsEnabled|global/read-write
maxConnectionCount|global/read-write
maxEgressFlowCount|global/read-write
maxEndpointCount|global/read-write
maxIngressFlowCount|global/read-write
maxMsgSpoolUsage|global/read-write
maxSubscriptionCount|global/read-write
maxTransactedSessionCount|global/read-write
maxTransactionCount|global/read-write
mqttRetainMaxMemory|global/read-write
replicationBridgeAuthenticationBasicClientUsername|global/read-write
replicationBridgeAuthenticationBasicPassword|global/read-write
replicationBridgeAuthenticationClientCertContent|global/read-write
replicationBridgeAuthenticationClientCertPassword|global/read-write
replicationBridgeAuthenticationScheme|global/read-write
replicationBridgeCompressedDataEnabled|global/read-write
replicationBridgeEgressFlowWindowSize|global/read-write
replicationBridgeRetryDelay|global/read-write
replicationBridgeTlsEnabled|global/read-write
replicationBridgeUnidirectionalClientProfileName|global/read-write
replicationEnabled|global/read-write
replicationEnabledQueueBehavior|global/read-write
replicationQueueMaxMsgSpoolUsage|global/read-write
replicationRole|global/read-write
restTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
restTlsServerCertMaxChainDepth|global/read-write
restTlsServerCertValidateDateEnabled|global/read-write
restTlsServerCertValidateNameEnabled|global/read-write
sempOverMsgBusAdminClientEnabled|global/read-write
sempOverMsgBusAdminDistributedCacheEnabled|global/read-write
sempOverMsgBusAdminEnabled|global/read-write
sempOverMsgBusEnabled|global/read-write
sempOverMsgBusShowEnabled|global/read-write
serviceAmqpMaxConnectionCount|global/read-write
serviceAmqpPlainTextListenPort|global/read-write
serviceAmqpTlsListenPort|global/read-write
serviceMqttMaxConnectionCount|global/read-write
serviceMqttPlainTextListenPort|global/read-write
serviceMqttTlsListenPort|global/read-write
serviceMqttTlsWebSocketListenPort|global/read-write
serviceMqttWebSocketListenPort|global/read-write
serviceRestIncomingMaxConnectionCount|global/read-write
serviceRestIncomingPlainTextListenPort|global/read-write
serviceRestIncomingTlsListenPort|global/read-write
serviceRestOutgoingMaxConnectionCount|global/read-write
serviceSmfMaxConnectionCount|global/read-write
serviceWebMaxConnectionCount|global/read-write



This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiReplaceMsgVpnRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpn(ctx context.Context, msgVpnName string) MsgVpnApiApiReplaceMsgVpnRequest {
	return MsgVpnApiApiReplaceMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnResponse
func (a *MsgVpnApiService) ReplaceMsgVpnExecute(r MsgVpnApiApiReplaceMsgVpnRequest) (*MsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnAclProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfile
	opaquePassword *string
	select_ *[]string
}

// The ACL Profile object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnAclProfileRequest) Body(body MsgVpnAclProfile) MsgVpnApiApiReplaceMsgVpnAclProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAclProfileRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnAclProfileRequest) Execute() (*MsgVpnAclProfileResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnAclProfileExecute(r)
}

/*
ReplaceMsgVpnAclProfile Replace an ACL Profile object.

Replace an ACL Profile object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiReplaceMsgVpnAclProfileRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnAclProfile(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiReplaceMsgVpnAclProfileRequest {
	return MsgVpnApiApiReplaceMsgVpnAclProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileResponse
func (a *MsgVpnApiService) ReplaceMsgVpnAclProfileExecute(r MsgVpnApiApiReplaceMsgVpnAclProfileRequest) (*MsgVpnAclProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	body *MsgVpnAuthenticationOauthProfile
	opaquePassword *string
	select_ *[]string
}

// The OAuth Profile object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest) Body(body MsgVpnAuthenticationOauthProfile) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest) Execute() (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnAuthenticationOauthProfileExecute(r)
}

/*
ReplaceMsgVpnAuthenticationOauthProfile Replace an OAuth Profile object.

Replace an OAuth Profile object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

OAuth profiles specify how to securely authenticate to an OAuth provider.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientSecret|||x|||x
msgVpnName|x|x||||
oauthProfileName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnAuthenticationOauthProfile(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest {
	return MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResponse
func (a *MsgVpnApiService) ReplaceMsgVpnAuthenticationOauthProfileExecute(r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProfileRequest) (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnAuthenticationOauthProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProviderName string
	body *MsgVpnAuthenticationOauthProvider
	opaquePassword *string
	select_ *[]string
}

// The OAuth Provider object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) Body(body MsgVpnAuthenticationOauthProvider) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) Execute() (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
ReplaceMsgVpnAuthenticationOauthProvider Replace an OAuth Provider object.

Replace an OAuth Provider object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
audienceClaimName|||||x|
audienceClaimSource|||||x|
audienceClaimValue|||||x|
audienceValidationEnabled|||||x|
authorizationGroupClaimName|||||x|
authorizationGroupClaimSource|||||x|
authorizationGroupEnabled|||||x|
disconnectOnTokenExpirationEnabled|||||x|
enabled|||||x|
jwksRefreshInterval|||||x|
jwksUri|||||x|
msgVpnName|x|x|||x|
oauthProviderName|x|x|||x|
tokenIgnoreTimeLimitsEnabled|||||x|
tokenIntrospectionParameterName|||||x|
tokenIntrospectionPassword|||x||x|x
tokenIntrospectionTimeout|||||x|
tokenIntrospectionUri|||||x|
tokenIntrospectionUsername|||||x|
usernameClaimName|||||x|
usernameClaimSource|||||x|
usernameValidateEnabled|||||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.25. Replaced by authenticationOauthProfiles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProviderName The name of the OAuth Provider.
 @return MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest

Deprecated
*/
func (a *MsgVpnApiService) ReplaceMsgVpnAuthenticationOauthProvider(ctx context.Context, msgVpnName string, oauthProviderName string) MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	return MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProviderResponse
// Deprecated
func (a *MsgVpnApiService) ReplaceMsgVpnAuthenticationOauthProviderExecute(r MsgVpnApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", url.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	authorizationGroupName string
	body *MsgVpnAuthorizationGroup
	opaquePassword *string
	select_ *[]string
}

// The Authorization Group object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest) Body(body MsgVpnAuthorizationGroup) MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest) Execute() (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnAuthorizationGroupExecute(r)
}

/*
ReplaceMsgVpnAuthorizationGroup Replace an Authorization Group object.

Replace an Authorization Group object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

To use client authorization groups configured on an external server to provide client authorizations, Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the external server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
authorizationGroupName|x|x||||
clientProfileName||||x||
msgVpnName|x|x||||
orderAfterAuthorizationGroupName|||x|||
orderBeforeAuthorizationGroupName|||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param authorizationGroupName The name of the Authorization Group. For LDAP groups, special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 @return MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnAuthorizationGroup(ctx context.Context, msgVpnName string, authorizationGroupName string) MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest {
	return MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthorizationGroupResponse
func (a *MsgVpnApiService) ReplaceMsgVpnAuthorizationGroupExecute(r MsgVpnApiApiReplaceMsgVpnAuthorizationGroupRequest) (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", url.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	body *MsgVpnBridge
	opaquePassword *string
	select_ *[]string
}

// The Bridge object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnBridgeRequest) Body(body MsgVpnBridge) MsgVpnApiApiReplaceMsgVpnBridgeRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnBridgeRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnBridgeRequest) Execute() (*MsgVpnBridgeResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnBridgeExecute(r)
}

/*
ReplaceMsgVpnBridge Replace a Bridge object.

Replace a Bridge object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
maxTtl||||x||
msgVpnName|x|x||||
remoteAuthenticationBasicClientUsername||||x||
remoteAuthenticationBasicPassword|||x|x||x
remoteAuthenticationClientCertContent|||x|x||x
remoteAuthenticationClientCertPassword|||x|x||
remoteAuthenticationScheme||||x||
remoteDeliverToOnePriority||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiReplaceMsgVpnBridgeRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnBridge(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiReplaceMsgVpnBridgeRequest {
	return MsgVpnApiApiReplaceMsgVpnBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeResponse
func (a *MsgVpnApiService) ReplaceMsgVpnBridgeExecute(r MsgVpnApiApiReplaceMsgVpnBridgeRequest) (*MsgVpnBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	remoteMsgVpnName string
	remoteMsgVpnLocation string
	remoteMsgVpnInterface string
	body *MsgVpnBridgeRemoteMsgVpn
	opaquePassword *string
	select_ *[]string
}

// The Remote Message VPN object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) Body(body MsgVpnBridgeRemoteMsgVpn) MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) Execute() (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
ReplaceMsgVpnBridgeRemoteMsgVpn Replace a Remote Message VPN object.

Replace a Remote Message VPN object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
clientUsername||||x||
compressedDataEnabled||||x||
egressFlowWindowSize||||x||
msgVpnName|x|x||||
password|||x|x||x
remoteMsgVpnInterface|x|x||||
remoteMsgVpnLocation|x|x||||
remoteMsgVpnName|x|x||||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param remoteMsgVpnName The name of the remote Message VPN.
 @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 @return MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnBridgeRemoteMsgVpn(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	return MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		remoteMsgVpnName: remoteMsgVpnName,
		remoteMsgVpnLocation: remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteMsgVpnResponse
func (a *MsgVpnApiService) ReplaceMsgVpnBridgeRemoteMsgVpnExecute(r MsgVpnApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnClientProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientProfileName string
	body *MsgVpnClientProfile
	opaquePassword *string
	select_ *[]string
}

// The Client Profile object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnClientProfileRequest) Body(body MsgVpnClientProfile) MsgVpnApiApiReplaceMsgVpnClientProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnClientProfileRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnClientProfileRequest) Execute() (*MsgVpnClientProfileResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnClientProfileExecute(r)
}

/*
ReplaceMsgVpnClientProfile Replace a Client Profile object.

Replace a Client Profile object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
allowCutThroughForwardingEnabled|||||x|
apiQueueManagementCopyFromOnCreateName|||||x|
apiTopicEndpointManagementCopyFromOnCreateName|||||x|
clientProfileName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientProfileName The name of the Client Profile.
 @return MsgVpnApiApiReplaceMsgVpnClientProfileRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnClientProfile(ctx context.Context, msgVpnName string, clientProfileName string) MsgVpnApiApiReplaceMsgVpnClientProfileRequest {
	return MsgVpnApiApiReplaceMsgVpnClientProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientProfileName: clientProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnClientProfileResponse
func (a *MsgVpnApiService) ReplaceMsgVpnClientProfileExecute(r MsgVpnApiApiReplaceMsgVpnClientProfileRequest) (*MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", url.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnClientUsernameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientUsername string
	body *MsgVpnClientUsername
	opaquePassword *string
	select_ *[]string
}

// The Client Username object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnClientUsernameRequest) Body(body MsgVpnClientUsername) MsgVpnApiApiReplaceMsgVpnClientUsernameRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnClientUsernameRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnClientUsernameRequest) Execute() (*MsgVpnClientUsernameResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnClientUsernameExecute(r)
}

/*
ReplaceMsgVpnClientUsername Replace a Client Username object.

Replace a Client Username object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
clientProfileName||||x||
clientUsername|x|x||||
msgVpnName|x|x||||
password|||x|||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientUsername The name of the Client Username.
 @return MsgVpnApiApiReplaceMsgVpnClientUsernameRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnClientUsername(ctx context.Context, msgVpnName string, clientUsername string) MsgVpnApiApiReplaceMsgVpnClientUsernameRequest {
	return MsgVpnApiApiReplaceMsgVpnClientUsernameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientUsername: clientUsername,
	}
}

// Execute executes the request
//  @return MsgVpnClientUsernameResponse
func (a *MsgVpnApiService) ReplaceMsgVpnClientUsernameExecute(r MsgVpnApiApiReplaceMsgVpnClientUsernameRequest) (*MsgVpnClientUsernameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", url.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	body *MsgVpnDistributedCache
	opaquePassword *string
	select_ *[]string
}

// The Distributed Cache object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest) Body(body MsgVpnDistributedCache) MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest) Execute() (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnDistributedCacheExecute(r)
}

/*
ReplaceMsgVpnDistributedCache Replace a Distributed Cache object.

Replace a Distributed Cache object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnDistributedCache|scheduledDeleteMsgDayList|scheduledDeleteMsgTimeList|
MsgVpnDistributedCache|scheduledDeleteMsgTimeList|scheduledDeleteMsgDayList|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @return MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnDistributedCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest {
	return MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheResponse
func (a *MsgVpnApiService) ReplaceMsgVpnDistributedCacheExecute(r MsgVpnApiApiReplaceMsgVpnDistributedCacheRequest) (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	body *MsgVpnDistributedCacheCluster
	opaquePassword *string
	select_ *[]string
}

// The Cache Cluster object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest) Body(body MsgVpnDistributedCacheCluster) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest) Execute() (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnDistributedCacheClusterExecute(r)
}

/*
ReplaceMsgVpnDistributedCacheCluster Replace a Cache Cluster object.

Replace a Cache Cluster object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnDistributedCacheCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	return MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterResponse
func (a *MsgVpnApiService) ReplaceMsgVpnDistributedCacheClusterExecute(r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterRequest) (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	instanceName string
	body *MsgVpnDistributedCacheClusterInstance
	opaquePassword *string
	select_ *[]string
}

// The Cache Instance object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) Body(body MsgVpnDistributedCacheClusterInstance) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) Execute() (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
ReplaceMsgVpnDistributedCacheClusterInstance Replace a Cache Instance object.

Replace a Cache Instance object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
instanceName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param instanceName The name of the Cache Instance.
 @return MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnDistributedCacheClusterInstance(ctx context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	return MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		instanceName: instanceName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterInstanceResponse
func (a *MsgVpnApiService) ReplaceMsgVpnDistributedCacheClusterInstanceExecute(r MsgVpnApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", url.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	remoteNodeName string
	body *MsgVpnDmrBridge
	opaquePassword *string
	select_ *[]string
}

// The DMR Bridge object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest) Body(body MsgVpnDmrBridge) MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest) Execute() (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnDmrBridgeExecute(r)
}

/*
ReplaceMsgVpnDmrBridge Replace a DMR Bridge object.

Replace a DMR Bridge object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
remoteNodeName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 @return MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnDmrBridge(ctx context.Context, msgVpnName string, remoteNodeName string) MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest {
	return MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

// Execute executes the request
//  @return MsgVpnDmrBridgeResponse
func (a *MsgVpnApiService) ReplaceMsgVpnDmrBridgeExecute(r MsgVpnApiApiReplaceMsgVpnDmrBridgeRequest) (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", url.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	connectionFactoryName string
	body *MsgVpnJndiConnectionFactory
	opaquePassword *string
	select_ *[]string
}

// The JNDI Connection Factory object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest) Body(body MsgVpnJndiConnectionFactory) MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest) Execute() (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnJndiConnectionFactoryExecute(r)
}

/*
ReplaceMsgVpnJndiConnectionFactory Replace a JNDI Connection Factory object.

Replace a JNDI Connection Factory object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param connectionFactoryName The name of the JMS Connection Factory.
 @return MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnJndiConnectionFactory(ctx context.Context, msgVpnName string, connectionFactoryName string) MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	return MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiConnectionFactoryResponse
func (a *MsgVpnApiService) ReplaceMsgVpnJndiConnectionFactoryExecute(r MsgVpnApiApiReplaceMsgVpnJndiConnectionFactoryRequest) (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", url.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnJndiQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	body *MsgVpnJndiQueue
	opaquePassword *string
	select_ *[]string
}

// The JNDI Queue object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnJndiQueueRequest) Body(body MsgVpnJndiQueue) MsgVpnApiApiReplaceMsgVpnJndiQueueRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnJndiQueueRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnJndiQueueRequest) Execute() (*MsgVpnJndiQueueResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnJndiQueueExecute(r)
}

/*
ReplaceMsgVpnJndiQueue Replace a JNDI Queue object.

Replace a JNDI Queue object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The JNDI name of the JMS Queue.
 @return MsgVpnApiApiReplaceMsgVpnJndiQueueRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnJndiQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiReplaceMsgVpnJndiQueueRequest {
	return MsgVpnApiApiReplaceMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiQueueResponse
func (a *MsgVpnApiService) ReplaceMsgVpnJndiQueueExecute(r MsgVpnApiApiReplaceMsgVpnJndiQueueRequest) (*MsgVpnJndiQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnJndiTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicName string
	body *MsgVpnJndiTopic
	opaquePassword *string
	select_ *[]string
}

// The JNDI Topic object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnJndiTopicRequest) Body(body MsgVpnJndiTopic) MsgVpnApiApiReplaceMsgVpnJndiTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnJndiTopicRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnJndiTopicRequest) Execute() (*MsgVpnJndiTopicResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnJndiTopicExecute(r)
}

/*
ReplaceMsgVpnJndiTopic Replace a JNDI Topic object.

Replace a JNDI Topic object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicName The JNDI name of the JMS Topic.
 @return MsgVpnApiApiReplaceMsgVpnJndiTopicRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnJndiTopic(ctx context.Context, msgVpnName string, topicName string) MsgVpnApiApiReplaceMsgVpnJndiTopicRequest {
	return MsgVpnApiApiReplaceMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicName: topicName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiTopicResponse
func (a *MsgVpnApiService) ReplaceMsgVpnJndiTopicExecute(r MsgVpnApiApiReplaceMsgVpnJndiTopicRequest) (*MsgVpnJndiTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", url.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	body *MsgVpnMqttRetainCache
	opaquePassword *string
	select_ *[]string
}

// The MQTT Retain Cache object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest) Body(body MsgVpnMqttRetainCache) MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest) Execute() (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnMqttRetainCacheExecute(r)
}

/*
ReplaceMsgVpnMqttRetainCache Replace an MQTT Retain Cache object.

Replace an MQTT Retain Cache object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the MQTT Retain Cache.
 @return MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnMqttRetainCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest {
	return MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttRetainCacheResponse
func (a *MsgVpnApiService) ReplaceMsgVpnMqttRetainCacheExecute(r MsgVpnApiApiReplaceMsgVpnMqttRetainCacheRequest) (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnMqttSessionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	body *MsgVpnMqttSession
	opaquePassword *string
	select_ *[]string
}

// The MQTT Session object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnMqttSessionRequest) Body(body MsgVpnMqttSession) MsgVpnApiApiReplaceMsgVpnMqttSessionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnMqttSessionRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnMqttSessionRequest) Execute() (*MsgVpnMqttSessionResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnMqttSessionExecute(r)
}

/*
ReplaceMsgVpnMqttSession Replace an MQTT Session object.

Replace an MQTT Session object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
owner||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @return MsgVpnApiApiReplaceMsgVpnMqttSessionRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnMqttSession(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) MsgVpnApiApiReplaceMsgVpnMqttSessionRequest {
	return MsgVpnApiApiReplaceMsgVpnMqttSessionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionResponse
func (a *MsgVpnApiService) ReplaceMsgVpnMqttSessionExecute(r MsgVpnApiApiReplaceMsgVpnMqttSessionRequest) (*MsgVpnMqttSessionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	subscriptionTopic string
	body *MsgVpnMqttSessionSubscription
	opaquePassword *string
	select_ *[]string
}

// The Subscription object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) Body(body MsgVpnMqttSessionSubscription) MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) Execute() (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
ReplaceMsgVpnMqttSessionSubscription Replace a Subscription object.

Replace a Subscription object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @param subscriptionTopic The MQTT subscription topic.
 @return MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnMqttSessionSubscription(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	return MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic: subscriptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionSubscriptionResponse
func (a *MsgVpnApiService) ReplaceMsgVpnMqttSessionSubscriptionExecute(r MsgVpnApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", url.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	body *MsgVpnQueue
	opaquePassword *string
	select_ *[]string
}

// The Queue object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnQueueRequest) Body(body MsgVpnQueue) MsgVpnApiApiReplaceMsgVpnQueueRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnQueueRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnQueueRequest) Execute() (*MsgVpnQueueResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnQueueExecute(r)
}

/*
ReplaceMsgVpnQueue Replace a Queue object.

Replace a Queue object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
queueName|x|x||||
respectMsgPriorityEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @return MsgVpnApiApiReplaceMsgVpnQueueRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiReplaceMsgVpnQueueRequest {
	return MsgVpnApiApiReplaceMsgVpnQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueResponse
func (a *MsgVpnApiService) ReplaceMsgVpnQueueExecute(r MsgVpnApiApiReplaceMsgVpnQueueRequest) (*MsgVpnQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueTemplateName string
	body *MsgVpnQueueTemplate
	opaquePassword *string
	select_ *[]string
}

// The Queue Template object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest) Body(body MsgVpnQueueTemplate) MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest) Execute() (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnQueueTemplateExecute(r)
}

/*
ReplaceMsgVpnQueueTemplate Replace a Queue Template object.

Replace a Queue Template object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueTemplateName The name of the Queue Template.
 @return MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnQueueTemplate(ctx context.Context, msgVpnName string, queueTemplateName string) MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest {
	return MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueTemplateResponse
func (a *MsgVpnApiService) ReplaceMsgVpnQueueTemplateExecute(r MsgVpnApiApiReplaceMsgVpnQueueTemplateRequest) (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", url.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnReplayLogRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replayLogName string
	body *MsgVpnReplayLog
	opaquePassword *string
	select_ *[]string
}

// The Replay Log object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnReplayLogRequest) Body(body MsgVpnReplayLog) MsgVpnApiApiReplaceMsgVpnReplayLogRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnReplayLogRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnReplayLogRequest) Execute() (*MsgVpnReplayLogResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnReplayLogExecute(r)
}

/*
ReplaceMsgVpnReplayLog Replace a Replay Log object.

Replace a Replay Log object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replayLogName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.10.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replayLogName The name of the Replay Log.
 @return MsgVpnApiApiReplaceMsgVpnReplayLogRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnReplayLog(ctx context.Context, msgVpnName string, replayLogName string) MsgVpnApiApiReplaceMsgVpnReplayLogRequest {
	return MsgVpnApiApiReplaceMsgVpnReplayLogRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replayLogName: replayLogName,
	}
}

// Execute executes the request
//  @return MsgVpnReplayLogResponse
func (a *MsgVpnApiService) ReplaceMsgVpnReplayLogExecute(r MsgVpnApiApiReplaceMsgVpnReplayLogRequest) (*MsgVpnReplayLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", url.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replicatedTopic string
	body *MsgVpnReplicatedTopic
	opaquePassword *string
	select_ *[]string
}

// The Replicated Topic object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest) Body(body MsgVpnReplicatedTopic) MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest) Execute() (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnReplicatedTopicExecute(r)
}

/*
ReplaceMsgVpnReplicatedTopic Replace a Replicated Topic object.

Replace a Replicated Topic object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replicatedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 @return MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnReplicatedTopic(ctx context.Context, msgVpnName string, replicatedTopic string) MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest {
	return MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

// Execute executes the request
//  @return MsgVpnReplicatedTopicResponse
func (a *MsgVpnApiService) ReplaceMsgVpnReplicatedTopicExecute(r MsgVpnApiApiReplaceMsgVpnReplicatedTopicRequest) (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", url.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	body *MsgVpnRestDeliveryPoint
	opaquePassword *string
	select_ *[]string
}

// The REST Delivery Point object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest) Body(body MsgVpnRestDeliveryPoint) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest) Execute() (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointExecute(r)
}

/*
ReplaceMsgVpnRestDeliveryPoint Replace a REST Delivery Point object.

Replace a REST Delivery Point object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientProfileName||||x||
msgVpnName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPoint(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest {
	return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointResponse
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointExecute(r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRequest) (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	body *MsgVpnRestDeliveryPointQueueBinding
	opaquePassword *string
	select_ *[]string
}

// The Queue Binding object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) Body(body MsgVpnRestDeliveryPointQueueBinding) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
ReplaceMsgVpnRestDeliveryPointQueueBinding Replace a Queue Binding object.

Replace a Queue Binding object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueBindingName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointQueueBinding(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingResponse
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointQueueBindingExecute(r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	headerName string
	body *MsgVpnRestDeliveryPointQueueBindingRequestHeader
	opaquePassword *string
	select_ *[]string
}

// The Request Header object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Body(body MsgVpnRestDeliveryPointQueueBindingRequestHeader) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r)
}

/*
ReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeader Replace a Request Header object.

Replace a Request Header object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A request header to be added to the HTTP request.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
headerName|x|x||||
msgVpnName|x|x||||
queueBindingName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.23.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @param headerName The name of the HTTP request header.
 @return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeader(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string, headerName string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
		headerName: headerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnRestDeliveryPointQueueBindingRequestHeader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}/requestHeaders/{headerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"headerName"+"}", url.PathEscape(parameterToString(r.headerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	body *MsgVpnRestDeliveryPointRestConsumer
	opaquePassword *string
	select_ *[]string
}

// The REST Consumer object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) Body(body MsgVpnRestDeliveryPointRestConsumer) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
ReplaceMsgVpnRestDeliveryPointRestConsumer Replace a REST Consumer object.

Replace a REST Consumer object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationAwsSecretAccessKey|||x|||x
authenticationClientCertContent|||x|x||x
authenticationClientCertPassword|||x|x||
authenticationHttpBasicPassword|||x|x||x
authenticationHttpBasicUsername||||x||
authenticationHttpHeaderValue|||x|||x
authenticationOauthClientId||||x||
authenticationOauthClientScope||||x||
authenticationOauthClientSecret|||x|x||x
authenticationOauthClientTokenEndpoint||||x||
authenticationOauthJwtSecretKey|||x|x||x
authenticationOauthJwtTokenEndpoint||||x||
authenticationScheme||||x||
msgVpnName|x|x||||
outgoingConnectionCount||||x||
remoteHost||||x||
remotePort||||x||
restConsumerName|x|x||||
restDeliveryPointName|x|x||||
tlsCipherSuiteList||||x||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointRestConsumer(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	return MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerResponse
func (a *MsgVpnApiService) ReplaceMsgVpnRestDeliveryPointRestConsumerExecute(r MsgVpnApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointName string
	body *MsgVpnTopicEndpoint
	opaquePassword *string
	select_ *[]string
}

// The Topic Endpoint object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest) Body(body MsgVpnTopicEndpoint) MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest) Execute() (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnTopicEndpointExecute(r)
}

/*
ReplaceMsgVpnTopicEndpoint Replace a Topic Endpoint object.

Replace a Topic Endpoint object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
respectMsgPriorityEnabled||||x||
topicEndpointName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointName The name of the Topic Endpoint.
 @return MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnTopicEndpoint(ctx context.Context, msgVpnName string, topicEndpointName string) MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest {
	return MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointResponse
func (a *MsgVpnApiService) ReplaceMsgVpnTopicEndpointExecute(r MsgVpnApiApiReplaceMsgVpnTopicEndpointRequest) (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", url.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointTemplateName string
	body *MsgVpnTopicEndpointTemplate
	opaquePassword *string
	select_ *[]string
}

// The Topic Endpoint Template object&#39;s attributes.
func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest) Body(body MsgVpnTopicEndpointTemplate) MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest) Execute() (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	return r.ApiService.ReplaceMsgVpnTopicEndpointTemplateExecute(r)
}

/*
ReplaceMsgVpnTopicEndpointTemplate Replace a Topic Endpoint Template object.

Replace a Topic Endpoint Template object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicEndpointTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 @return MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest
*/
func (a *MsgVpnApiService) ReplaceMsgVpnTopicEndpointTemplate(ctx context.Context, msgVpnName string, topicEndpointTemplateName string) MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	return MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointTemplateResponse
func (a *MsgVpnApiService) ReplaceMsgVpnTopicEndpointTemplateExecute(r MsgVpnApiApiReplaceMsgVpnTopicEndpointTemplateRequest) (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.ReplaceMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", url.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	body *MsgVpn
	opaquePassword *string
	select_ *[]string
}

// The Message VPN object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnRequest) Body(body MsgVpn) MsgVpnApiApiUpdateMsgVpnRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnRequest) Execute() (*MsgVpnResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnExecute(r)
}

/*
UpdateMsgVpn Update a Message VPN object.

Update a Message VPN object. Any attribute missing from the request will be left unchanged.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationOauthDefaultProviderName|||||x|
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||||x|
msgVpnName|x|x||||
replicationBridgeAuthenticationBasicPassword|||x|||x
replicationBridgeAuthenticationClientCertContent|||x|||x
replicationBridgeAuthenticationClientCertPassword|||x|||
replicationEnabledQueueBehavior|||x|||
restTlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
alias|global/read-write
authenticationBasicEnabled|global/read-write
authenticationBasicProfileName|global/read-write
authenticationBasicRadiusDomain|global/read-write
authenticationBasicType|global/read-write
authenticationClientCertAllowApiProvidedUsernameEnabled|global/read-write
authenticationClientCertEnabled|global/read-write
authenticationClientCertMaxChainDepth|global/read-write
authenticationClientCertRevocationCheckMode|global/read-write
authenticationClientCertUsernameSource|global/read-write
authenticationClientCertValidateDateEnabled|global/read-write
authenticationKerberosAllowApiProvidedUsernameEnabled|global/read-write
authenticationKerberosEnabled|global/read-write
authenticationOauthEnabled|global/read-write
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
bridgingTlsServerCertMaxChainDepth|global/read-write
bridgingTlsServerCertValidateDateEnabled|global/read-write
bridgingTlsServerCertValidateNameEnabled|global/read-write
dmrEnabled|global/read-write
exportSubscriptionsEnabled|global/read-write
maxConnectionCount|global/read-write
maxEgressFlowCount|global/read-write
maxEndpointCount|global/read-write
maxIngressFlowCount|global/read-write
maxMsgSpoolUsage|global/read-write
maxSubscriptionCount|global/read-write
maxTransactedSessionCount|global/read-write
maxTransactionCount|global/read-write
mqttRetainMaxMemory|global/read-write
replicationBridgeAuthenticationBasicClientUsername|global/read-write
replicationBridgeAuthenticationBasicPassword|global/read-write
replicationBridgeAuthenticationClientCertContent|global/read-write
replicationBridgeAuthenticationClientCertPassword|global/read-write
replicationBridgeAuthenticationScheme|global/read-write
replicationBridgeCompressedDataEnabled|global/read-write
replicationBridgeEgressFlowWindowSize|global/read-write
replicationBridgeRetryDelay|global/read-write
replicationBridgeTlsEnabled|global/read-write
replicationBridgeUnidirectionalClientProfileName|global/read-write
replicationEnabled|global/read-write
replicationEnabledQueueBehavior|global/read-write
replicationQueueMaxMsgSpoolUsage|global/read-write
replicationRole|global/read-write
restTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
restTlsServerCertMaxChainDepth|global/read-write
restTlsServerCertValidateDateEnabled|global/read-write
restTlsServerCertValidateNameEnabled|global/read-write
sempOverMsgBusAdminClientEnabled|global/read-write
sempOverMsgBusAdminDistributedCacheEnabled|global/read-write
sempOverMsgBusAdminEnabled|global/read-write
sempOverMsgBusEnabled|global/read-write
sempOverMsgBusShowEnabled|global/read-write
serviceAmqpMaxConnectionCount|global/read-write
serviceAmqpPlainTextListenPort|global/read-write
serviceAmqpTlsListenPort|global/read-write
serviceMqttMaxConnectionCount|global/read-write
serviceMqttPlainTextListenPort|global/read-write
serviceMqttTlsListenPort|global/read-write
serviceMqttTlsWebSocketListenPort|global/read-write
serviceMqttWebSocketListenPort|global/read-write
serviceRestIncomingMaxConnectionCount|global/read-write
serviceRestIncomingPlainTextListenPort|global/read-write
serviceRestIncomingTlsListenPort|global/read-write
serviceRestOutgoingMaxConnectionCount|global/read-write
serviceSmfMaxConnectionCount|global/read-write
serviceWebMaxConnectionCount|global/read-write



This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @return MsgVpnApiApiUpdateMsgVpnRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpn(ctx context.Context, msgVpnName string) MsgVpnApiApiUpdateMsgVpnRequest {
	return MsgVpnApiApiUpdateMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
	}
}

// Execute executes the request
//  @return MsgVpnResponse
func (a *MsgVpnApiService) UpdateMsgVpnExecute(r MsgVpnApiApiUpdateMsgVpnRequest) (*MsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnAclProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	aclProfileName string
	body *MsgVpnAclProfile
	opaquePassword *string
	select_ *[]string
}

// The ACL Profile object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnAclProfileRequest) Body(body MsgVpnAclProfile) MsgVpnApiApiUpdateMsgVpnAclProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAclProfileRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnAclProfileRequest) Execute() (*MsgVpnAclProfileResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnAclProfileExecute(r)
}

/*
UpdateMsgVpnAclProfile Update an ACL Profile object.

Update an ACL Profile object. Any attribute missing from the request will be left unchanged.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param aclProfileName The name of the ACL Profile.
 @return MsgVpnApiApiUpdateMsgVpnAclProfileRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnAclProfile(ctx context.Context, msgVpnName string, aclProfileName string) MsgVpnApiApiUpdateMsgVpnAclProfileRequest {
	return MsgVpnApiApiUpdateMsgVpnAclProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		aclProfileName: aclProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAclProfileResponse
func (a *MsgVpnApiService) UpdateMsgVpnAclProfileExecute(r MsgVpnApiApiUpdateMsgVpnAclProfileRequest) (*MsgVpnAclProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", url.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProfileName string
	body *MsgVpnAuthenticationOauthProfile
	opaquePassword *string
	select_ *[]string
}

// The OAuth Profile object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest) Body(body MsgVpnAuthenticationOauthProfile) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest) Execute() (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnAuthenticationOauthProfileExecute(r)
}

/*
UpdateMsgVpnAuthenticationOauthProfile Update an OAuth Profile object.

Update an OAuth Profile object. Any attribute missing from the request will be left unchanged.

OAuth profiles specify how to securely authenticate to an OAuth provider.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientSecret|||x|||x
msgVpnName|x|x||||
oauthProfileName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.25.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProfileName The name of the OAuth profile.
 @return MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnAuthenticationOauthProfile(ctx context.Context, msgVpnName string, oauthProfileName string) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest {
	return MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProfileName: oauthProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProfileResponse
func (a *MsgVpnApiService) UpdateMsgVpnAuthenticationOauthProfileExecute(r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProfileRequest) (*MsgVpnAuthenticationOauthProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnAuthenticationOauthProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProfiles/{oauthProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProfileName"+"}", url.PathEscape(parameterToString(r.oauthProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	oauthProviderName string
	body *MsgVpnAuthenticationOauthProvider
	opaquePassword *string
	select_ *[]string
}

// The OAuth Provider object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) Body(body MsgVpnAuthenticationOauthProvider) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) Execute() (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
UpdateMsgVpnAuthenticationOauthProvider Update an OAuth Provider object.

Update an OAuth Provider object. Any attribute missing from the request will be left unchanged.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
audienceClaimName|||||x|
audienceClaimSource|||||x|
audienceClaimValue|||||x|
audienceValidationEnabled|||||x|
authorizationGroupClaimName|||||x|
authorizationGroupClaimSource|||||x|
authorizationGroupEnabled|||||x|
disconnectOnTokenExpirationEnabled|||||x|
enabled|||||x|
jwksRefreshInterval|||||x|
jwksUri|||||x|
msgVpnName|x|x|||x|
oauthProviderName|x|x|||x|
tokenIgnoreTimeLimitsEnabled|||||x|
tokenIntrospectionParameterName|||||x|
tokenIntrospectionPassword|||x||x|x
tokenIntrospectionTimeout|||||x|
tokenIntrospectionUri|||||x|
tokenIntrospectionUsername|||||x|
usernameClaimName|||||x|
usernameClaimSource|||||x|
usernameValidateEnabled|||||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.25. Replaced by authenticationOauthProfiles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param oauthProviderName The name of the OAuth Provider.
 @return MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest

Deprecated
*/
func (a *MsgVpnApiService) UpdateMsgVpnAuthenticationOauthProvider(ctx context.Context, msgVpnName string, oauthProviderName string) MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	return MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthenticationOauthProviderResponse
// Deprecated
func (a *MsgVpnApiService) UpdateMsgVpnAuthenticationOauthProviderExecute(r MsgVpnApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) (*MsgVpnAuthenticationOauthProviderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", url.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	authorizationGroupName string
	body *MsgVpnAuthorizationGroup
	opaquePassword *string
	select_ *[]string
}

// The Authorization Group object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest) Body(body MsgVpnAuthorizationGroup) MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest) Execute() (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnAuthorizationGroupExecute(r)
}

/*
UpdateMsgVpnAuthorizationGroup Update an Authorization Group object.

Update an Authorization Group object. Any attribute missing from the request will be left unchanged.

To use client authorization groups configured on an external server to provide client authorizations, Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the external server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
authorizationGroupName|x|x||||
clientProfileName||||x||
msgVpnName|x|x||||
orderAfterAuthorizationGroupName|||x|||
orderBeforeAuthorizationGroupName|||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param authorizationGroupName The name of the Authorization Group. For LDAP groups, special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 @return MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnAuthorizationGroup(ctx context.Context, msgVpnName string, authorizationGroupName string) MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest {
	return MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

// Execute executes the request
//  @return MsgVpnAuthorizationGroupResponse
func (a *MsgVpnApiService) UpdateMsgVpnAuthorizationGroupExecute(r MsgVpnApiApiUpdateMsgVpnAuthorizationGroupRequest) (*MsgVpnAuthorizationGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", url.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	body *MsgVpnBridge
	opaquePassword *string
	select_ *[]string
}

// The Bridge object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnBridgeRequest) Body(body MsgVpnBridge) MsgVpnApiApiUpdateMsgVpnBridgeRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnBridgeRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnBridgeRequest) Execute() (*MsgVpnBridgeResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnBridgeExecute(r)
}

/*
UpdateMsgVpnBridge Update a Bridge object.

Update a Bridge object. Any attribute missing from the request will be left unchanged.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
maxTtl||||x||
msgVpnName|x|x||||
remoteAuthenticationBasicClientUsername||||x||
remoteAuthenticationBasicPassword|||x|x||x
remoteAuthenticationClientCertContent|||x|x||x
remoteAuthenticationClientCertPassword|||x|x||
remoteAuthenticationScheme||||x||
remoteDeliverToOnePriority||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @return MsgVpnApiApiUpdateMsgVpnBridgeRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnBridge(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) MsgVpnApiApiUpdateMsgVpnBridgeRequest {
	return MsgVpnApiApiUpdateMsgVpnBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeResponse
func (a *MsgVpnApiService) UpdateMsgVpnBridgeExecute(r MsgVpnApiApiUpdateMsgVpnBridgeRequest) (*MsgVpnBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	bridgeName string
	bridgeVirtualRouter string
	remoteMsgVpnName string
	remoteMsgVpnLocation string
	remoteMsgVpnInterface string
	body *MsgVpnBridgeRemoteMsgVpn
	opaquePassword *string
	select_ *[]string
}

// The Remote Message VPN object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) Body(body MsgVpnBridgeRemoteMsgVpn) MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) Execute() (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
UpdateMsgVpnBridgeRemoteMsgVpn Update a Remote Message VPN object.

Update a Remote Message VPN object. Any attribute missing from the request will be left unchanged.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
clientUsername||||x||
compressedDataEnabled||||x||
egressFlowWindowSize||||x||
msgVpnName|x|x||||
password|||x|x||x
remoteMsgVpnInterface|x|x||||
remoteMsgVpnLocation|x|x||||
remoteMsgVpnName|x|x||||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param bridgeName The name of the Bridge.
 @param bridgeVirtualRouter The virtual router of the Bridge.
 @param remoteMsgVpnName The name of the remote Message VPN.
 @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 @return MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnBridgeRemoteMsgVpn(ctx context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	return MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		bridgeName: bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
		remoteMsgVpnName: remoteMsgVpnName,
		remoteMsgVpnLocation: remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

// Execute executes the request
//  @return MsgVpnBridgeRemoteMsgVpnResponse
func (a *MsgVpnApiService) UpdateMsgVpnBridgeRemoteMsgVpnExecute(r MsgVpnApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) (*MsgVpnBridgeRemoteMsgVpnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", url.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", url.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", url.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnClientProfileRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientProfileName string
	body *MsgVpnClientProfile
	opaquePassword *string
	select_ *[]string
}

// The Client Profile object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnClientProfileRequest) Body(body MsgVpnClientProfile) MsgVpnApiApiUpdateMsgVpnClientProfileRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnClientProfileRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnClientProfileRequest) Execute() (*MsgVpnClientProfileResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnClientProfileExecute(r)
}

/*
UpdateMsgVpnClientProfile Update a Client Profile object.

Update a Client Profile object. Any attribute missing from the request will be left unchanged.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
allowCutThroughForwardingEnabled|||||x|
apiQueueManagementCopyFromOnCreateName|||||x|
apiTopicEndpointManagementCopyFromOnCreateName|||||x|
clientProfileName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientProfileName The name of the Client Profile.
 @return MsgVpnApiApiUpdateMsgVpnClientProfileRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnClientProfile(ctx context.Context, msgVpnName string, clientProfileName string) MsgVpnApiApiUpdateMsgVpnClientProfileRequest {
	return MsgVpnApiApiUpdateMsgVpnClientProfileRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientProfileName: clientProfileName,
	}
}

// Execute executes the request
//  @return MsgVpnClientProfileResponse
func (a *MsgVpnApiService) UpdateMsgVpnClientProfileExecute(r MsgVpnApiApiUpdateMsgVpnClientProfileRequest) (*MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", url.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnClientUsernameRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	clientUsername string
	body *MsgVpnClientUsername
	opaquePassword *string
	select_ *[]string
}

// The Client Username object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnClientUsernameRequest) Body(body MsgVpnClientUsername) MsgVpnApiApiUpdateMsgVpnClientUsernameRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnClientUsernameRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnClientUsernameRequest) Execute() (*MsgVpnClientUsernameResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnClientUsernameExecute(r)
}

/*
UpdateMsgVpnClientUsername Update a Client Username object.

Update a Client Username object. Any attribute missing from the request will be left unchanged.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
clientProfileName||||x||
clientUsername|x|x||||
msgVpnName|x|x||||
password|||x|||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param clientUsername The name of the Client Username.
 @return MsgVpnApiApiUpdateMsgVpnClientUsernameRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnClientUsername(ctx context.Context, msgVpnName string, clientUsername string) MsgVpnApiApiUpdateMsgVpnClientUsernameRequest {
	return MsgVpnApiApiUpdateMsgVpnClientUsernameRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		clientUsername: clientUsername,
	}
}

// Execute executes the request
//  @return MsgVpnClientUsernameResponse
func (a *MsgVpnApiService) UpdateMsgVpnClientUsernameExecute(r MsgVpnApiApiUpdateMsgVpnClientUsernameRequest) (*MsgVpnClientUsernameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", url.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	body *MsgVpnDistributedCache
	opaquePassword *string
	select_ *[]string
}

// The Distributed Cache object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest) Body(body MsgVpnDistributedCache) MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest) Execute() (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnDistributedCacheExecute(r)
}

/*
UpdateMsgVpnDistributedCache Update a Distributed Cache object.

Update a Distributed Cache object. Any attribute missing from the request will be left unchanged.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnDistributedCache|scheduledDeleteMsgDayList|scheduledDeleteMsgTimeList|
MsgVpnDistributedCache|scheduledDeleteMsgTimeList|scheduledDeleteMsgDayList|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @return MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnDistributedCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest {
	return MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheResponse
func (a *MsgVpnApiService) UpdateMsgVpnDistributedCacheExecute(r MsgVpnApiApiUpdateMsgVpnDistributedCacheRequest) (*MsgVpnDistributedCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	body *MsgVpnDistributedCacheCluster
	opaquePassword *string
	select_ *[]string
}

// The Cache Cluster object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest) Body(body MsgVpnDistributedCacheCluster) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest) Execute() (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnDistributedCacheClusterExecute(r)
}

/*
UpdateMsgVpnDistributedCacheCluster Update a Cache Cluster object.

Update a Cache Cluster object. Any attribute missing from the request will be left unchanged.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @return MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnDistributedCacheCluster(ctx context.Context, msgVpnName string, cacheName string, clusterName string) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	return MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterResponse
func (a *MsgVpnApiService) UpdateMsgVpnDistributedCacheClusterExecute(r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterRequest) (*MsgVpnDistributedCacheClusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	clusterName string
	instanceName string
	body *MsgVpnDistributedCacheClusterInstance
	opaquePassword *string
	select_ *[]string
}

// The Cache Instance object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) Body(body MsgVpnDistributedCacheClusterInstance) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) Execute() (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
UpdateMsgVpnDistributedCacheClusterInstance Update a Cache Instance object.

Update a Cache Instance object. Any attribute missing from the request will be left unchanged.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
instanceName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the Distributed Cache.
 @param clusterName The name of the Cache Cluster.
 @param instanceName The name of the Cache Instance.
 @return MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnDistributedCacheClusterInstance(ctx context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	return MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
		clusterName: clusterName,
		instanceName: instanceName,
	}
}

// Execute executes the request
//  @return MsgVpnDistributedCacheClusterInstanceResponse
func (a *MsgVpnApiService) UpdateMsgVpnDistributedCacheClusterInstanceExecute(r MsgVpnApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) (*MsgVpnDistributedCacheClusterInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", url.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", url.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	remoteNodeName string
	body *MsgVpnDmrBridge
	opaquePassword *string
	select_ *[]string
}

// The DMR Bridge object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest) Body(body MsgVpnDmrBridge) MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest) Execute() (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnDmrBridgeExecute(r)
}

/*
UpdateMsgVpnDmrBridge Update a DMR Bridge object.

Update a DMR Bridge object. Any attribute missing from the request will be left unchanged.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
remoteNodeName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 @return MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnDmrBridge(ctx context.Context, msgVpnName string, remoteNodeName string) MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest {
	return MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

// Execute executes the request
//  @return MsgVpnDmrBridgeResponse
func (a *MsgVpnApiService) UpdateMsgVpnDmrBridgeExecute(r MsgVpnApiApiUpdateMsgVpnDmrBridgeRequest) (*MsgVpnDmrBridgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", url.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	connectionFactoryName string
	body *MsgVpnJndiConnectionFactory
	opaquePassword *string
	select_ *[]string
}

// The JNDI Connection Factory object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest) Body(body MsgVpnJndiConnectionFactory) MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest) Execute() (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnJndiConnectionFactoryExecute(r)
}

/*
UpdateMsgVpnJndiConnectionFactory Update a JNDI Connection Factory object.

Update a JNDI Connection Factory object. Any attribute missing from the request will be left unchanged.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param connectionFactoryName The name of the JMS Connection Factory.
 @return MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnJndiConnectionFactory(ctx context.Context, msgVpnName string, connectionFactoryName string) MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	return MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiConnectionFactoryResponse
func (a *MsgVpnApiService) UpdateMsgVpnJndiConnectionFactoryExecute(r MsgVpnApiApiUpdateMsgVpnJndiConnectionFactoryRequest) (*MsgVpnJndiConnectionFactoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", url.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnJndiQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	body *MsgVpnJndiQueue
	opaquePassword *string
	select_ *[]string
}

// The JNDI Queue object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnJndiQueueRequest) Body(body MsgVpnJndiQueue) MsgVpnApiApiUpdateMsgVpnJndiQueueRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnJndiQueueRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnJndiQueueRequest) Execute() (*MsgVpnJndiQueueResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnJndiQueueExecute(r)
}

/*
UpdateMsgVpnJndiQueue Update a JNDI Queue object.

Update a JNDI Queue object. Any attribute missing from the request will be left unchanged.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The JNDI name of the JMS Queue.
 @return MsgVpnApiApiUpdateMsgVpnJndiQueueRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnJndiQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiUpdateMsgVpnJndiQueueRequest {
	return MsgVpnApiApiUpdateMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiQueueResponse
func (a *MsgVpnApiService) UpdateMsgVpnJndiQueueExecute(r MsgVpnApiApiUpdateMsgVpnJndiQueueRequest) (*MsgVpnJndiQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnJndiTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicName string
	body *MsgVpnJndiTopic
	opaquePassword *string
	select_ *[]string
}

// The JNDI Topic object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnJndiTopicRequest) Body(body MsgVpnJndiTopic) MsgVpnApiApiUpdateMsgVpnJndiTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnJndiTopicRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnJndiTopicRequest) Execute() (*MsgVpnJndiTopicResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnJndiTopicExecute(r)
}

/*
UpdateMsgVpnJndiTopic Update a JNDI Topic object.

Update a JNDI Topic object. Any attribute missing from the request will be left unchanged.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicName The JNDI name of the JMS Topic.
 @return MsgVpnApiApiUpdateMsgVpnJndiTopicRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnJndiTopic(ctx context.Context, msgVpnName string, topicName string) MsgVpnApiApiUpdateMsgVpnJndiTopicRequest {
	return MsgVpnApiApiUpdateMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicName: topicName,
	}
}

// Execute executes the request
//  @return MsgVpnJndiTopicResponse
func (a *MsgVpnApiService) UpdateMsgVpnJndiTopicExecute(r MsgVpnApiApiUpdateMsgVpnJndiTopicRequest) (*MsgVpnJndiTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", url.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	cacheName string
	body *MsgVpnMqttRetainCache
	opaquePassword *string
	select_ *[]string
}

// The MQTT Retain Cache object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest) Body(body MsgVpnMqttRetainCache) MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest) Execute() (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnMqttRetainCacheExecute(r)
}

/*
UpdateMsgVpnMqttRetainCache Update an MQTT Retain Cache object.

Update an MQTT Retain Cache object. Any attribute missing from the request will be left unchanged.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param cacheName The name of the MQTT Retain Cache.
 @return MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnMqttRetainCache(ctx context.Context, msgVpnName string, cacheName string) MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest {
	return MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		cacheName: cacheName,
	}
}

// Execute executes the request
//  @return MsgVpnMqttRetainCacheResponse
func (a *MsgVpnApiService) UpdateMsgVpnMqttRetainCacheExecute(r MsgVpnApiApiUpdateMsgVpnMqttRetainCacheRequest) (*MsgVpnMqttRetainCacheResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", url.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnMqttSessionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	body *MsgVpnMqttSession
	opaquePassword *string
	select_ *[]string
}

// The MQTT Session object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnMqttSessionRequest) Body(body MsgVpnMqttSession) MsgVpnApiApiUpdateMsgVpnMqttSessionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnMqttSessionRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnMqttSessionRequest) Execute() (*MsgVpnMqttSessionResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnMqttSessionExecute(r)
}

/*
UpdateMsgVpnMqttSession Update an MQTT Session object.

Update an MQTT Session object. Any attribute missing from the request will be left unchanged.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
owner||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @return MsgVpnApiApiUpdateMsgVpnMqttSessionRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnMqttSession(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) MsgVpnApiApiUpdateMsgVpnMqttSessionRequest {
	return MsgVpnApiApiUpdateMsgVpnMqttSessionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionResponse
func (a *MsgVpnApiService) UpdateMsgVpnMqttSessionExecute(r MsgVpnApiApiUpdateMsgVpnMqttSessionRequest) (*MsgVpnMqttSessionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	mqttSessionClientId string
	mqttSessionVirtualRouter string
	subscriptionTopic string
	body *MsgVpnMqttSessionSubscription
	opaquePassword *string
	select_ *[]string
}

// The Subscription object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) Body(body MsgVpnMqttSessionSubscription) MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) Execute() (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
UpdateMsgVpnMqttSessionSubscription Update a Subscription object.

Update a Subscription object. Any attribute missing from the request will be left unchanged.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 @param subscriptionTopic The MQTT subscription topic.
 @return MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnMqttSessionSubscription(ctx context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	return MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		mqttSessionClientId: mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic: subscriptionTopic,
	}
}

// Execute executes the request
//  @return MsgVpnMqttSessionSubscriptionResponse
func (a *MsgVpnApiService) UpdateMsgVpnMqttSessionSubscriptionExecute(r MsgVpnApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) (*MsgVpnMqttSessionSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", url.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", url.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", url.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnQueueRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueName string
	body *MsgVpnQueue
	opaquePassword *string
	select_ *[]string
}

// The Queue object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnQueueRequest) Body(body MsgVpnQueue) MsgVpnApiApiUpdateMsgVpnQueueRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnQueueRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnQueueRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnQueueRequest) Execute() (*MsgVpnQueueResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnQueueExecute(r)
}

/*
UpdateMsgVpnQueue Update a Queue object.

Update a Queue object. Any attribute missing from the request will be left unchanged.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
queueName|x|x||||
respectMsgPriorityEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueName The name of the Queue.
 @return MsgVpnApiApiUpdateMsgVpnQueueRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnQueue(ctx context.Context, msgVpnName string, queueName string) MsgVpnApiApiUpdateMsgVpnQueueRequest {
	return MsgVpnApiApiUpdateMsgVpnQueueRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueName: queueName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueResponse
func (a *MsgVpnApiService) UpdateMsgVpnQueueExecute(r MsgVpnApiApiUpdateMsgVpnQueueRequest) (*MsgVpnQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", url.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	queueTemplateName string
	body *MsgVpnQueueTemplate
	opaquePassword *string
	select_ *[]string
}

// The Queue Template object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest) Body(body MsgVpnQueueTemplate) MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest) Execute() (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnQueueTemplateExecute(r)
}

/*
UpdateMsgVpnQueueTemplate Update a Queue Template object.

Update a Queue Template object. Any attribute missing from the request will be left unchanged.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param queueTemplateName The name of the Queue Template.
 @return MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnQueueTemplate(ctx context.Context, msgVpnName string, queueTemplateName string) MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest {
	return MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

// Execute executes the request
//  @return MsgVpnQueueTemplateResponse
func (a *MsgVpnApiService) UpdateMsgVpnQueueTemplateExecute(r MsgVpnApiApiUpdateMsgVpnQueueTemplateRequest) (*MsgVpnQueueTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", url.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnReplayLogRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replayLogName string
	body *MsgVpnReplayLog
	opaquePassword *string
	select_ *[]string
}

// The Replay Log object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnReplayLogRequest) Body(body MsgVpnReplayLog) MsgVpnApiApiUpdateMsgVpnReplayLogRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnReplayLogRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnReplayLogRequest) Execute() (*MsgVpnReplayLogResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnReplayLogExecute(r)
}

/*
UpdateMsgVpnReplayLog Update a Replay Log object.

Update a Replay Log object. Any attribute missing from the request will be left unchanged.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replayLogName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.10.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replayLogName The name of the Replay Log.
 @return MsgVpnApiApiUpdateMsgVpnReplayLogRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnReplayLog(ctx context.Context, msgVpnName string, replayLogName string) MsgVpnApiApiUpdateMsgVpnReplayLogRequest {
	return MsgVpnApiApiUpdateMsgVpnReplayLogRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replayLogName: replayLogName,
	}
}

// Execute executes the request
//  @return MsgVpnReplayLogResponse
func (a *MsgVpnApiService) UpdateMsgVpnReplayLogExecute(r MsgVpnApiApiUpdateMsgVpnReplayLogRequest) (*MsgVpnReplayLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", url.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	replicatedTopic string
	body *MsgVpnReplicatedTopic
	opaquePassword *string
	select_ *[]string
}

// The Replicated Topic object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest) Body(body MsgVpnReplicatedTopic) MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest) Execute() (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnReplicatedTopicExecute(r)
}

/*
UpdateMsgVpnReplicatedTopic Update a Replicated Topic object.

Update a Replicated Topic object. Any attribute missing from the request will be left unchanged.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replicatedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 @return MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnReplicatedTopic(ctx context.Context, msgVpnName string, replicatedTopic string) MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest {
	return MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

// Execute executes the request
//  @return MsgVpnReplicatedTopicResponse
func (a *MsgVpnApiService) UpdateMsgVpnReplicatedTopicExecute(r MsgVpnApiApiUpdateMsgVpnReplicatedTopicRequest) (*MsgVpnReplicatedTopicResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", url.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	body *MsgVpnRestDeliveryPoint
	opaquePassword *string
	select_ *[]string
}

// The REST Delivery Point object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest) Body(body MsgVpnRestDeliveryPoint) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest) Execute() (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointExecute(r)
}

/*
UpdateMsgVpnRestDeliveryPoint Update a REST Delivery Point object.

Update a REST Delivery Point object. Any attribute missing from the request will be left unchanged.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientProfileName||||x||
msgVpnName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPoint(ctx context.Context, msgVpnName string, restDeliveryPointName string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest {
	return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointResponse
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointExecute(r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRequest) (*MsgVpnRestDeliveryPointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	body *MsgVpnRestDeliveryPointQueueBinding
	opaquePassword *string
	select_ *[]string
}

// The Queue Binding object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) Body(body MsgVpnRestDeliveryPointQueueBinding) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
UpdateMsgVpnRestDeliveryPointQueueBinding Update a Queue Binding object.

Update a Queue Binding object. Any attribute missing from the request will be left unchanged.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueBindingName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointQueueBinding(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingResponse
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointQueueBindingExecute(r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) (*MsgVpnRestDeliveryPointQueueBindingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	queueBindingName string
	headerName string
	body *MsgVpnRestDeliveryPointQueueBindingRequestHeader
	opaquePassword *string
	select_ *[]string
}

// The Request Header object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Body(body MsgVpnRestDeliveryPointQueueBindingRequestHeader) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) Execute() (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r)
}

/*
UpdateMsgVpnRestDeliveryPointQueueBindingRequestHeader Update a Request Header object.

Update a Request Header object. Any attribute missing from the request will be left unchanged.

A request header to be added to the HTTP request.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
headerName|x|x||||
msgVpnName|x|x||||
queueBindingName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.23.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param queueBindingName The name of a queue in the Message VPN.
 @param headerName The name of the HTTP request header.
 @return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointQueueBindingRequestHeader(ctx context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string, headerName string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest {
	return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName: queueBindingName,
		headerName: headerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderExecute(r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequestHeaderRequest) (*MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointQueueBindingRequestHeaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnRestDeliveryPointQueueBindingRequestHeader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}/requestHeaders/{headerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", url.PathEscape(parameterToString(r.queueBindingName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"headerName"+"}", url.PathEscape(parameterToString(r.headerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	restDeliveryPointName string
	restConsumerName string
	body *MsgVpnRestDeliveryPointRestConsumer
	opaquePassword *string
	select_ *[]string
}

// The REST Consumer object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) Body(body MsgVpnRestDeliveryPointRestConsumer) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
UpdateMsgVpnRestDeliveryPointRestConsumer Update a REST Consumer object.

Update a REST Consumer object. Any attribute missing from the request will be left unchanged.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationAwsSecretAccessKey|||x|||x
authenticationClientCertContent|||x|x||x
authenticationClientCertPassword|||x|x||
authenticationHttpBasicPassword|||x|x||x
authenticationHttpBasicUsername||||x||
authenticationHttpHeaderValue|||x|||x
authenticationOauthClientId||||x||
authenticationOauthClientScope||||x||
authenticationOauthClientSecret|||x|x||x
authenticationOauthClientTokenEndpoint||||x||
authenticationOauthJwtSecretKey|||x|x||x
authenticationOauthJwtTokenEndpoint||||x||
authenticationScheme||||x||
msgVpnName|x|x||||
outgoingConnectionCount||||x||
remoteHost||||x||
remotePort||||x||
restConsumerName|x|x||||
restDeliveryPointName|x|x||||
tlsCipherSuiteList||||x||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param restDeliveryPointName The name of the REST Delivery Point.
 @param restConsumerName The name of the REST Consumer.
 @return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointRestConsumer(ctx context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	return MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName: restConsumerName,
	}
}

// Execute executes the request
//  @return MsgVpnRestDeliveryPointRestConsumerResponse
func (a *MsgVpnApiService) UpdateMsgVpnRestDeliveryPointRestConsumerExecute(r MsgVpnApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) (*MsgVpnRestDeliveryPointRestConsumerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", url.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", url.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointName string
	body *MsgVpnTopicEndpoint
	opaquePassword *string
	select_ *[]string
}

// The Topic Endpoint object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest) Body(body MsgVpnTopicEndpoint) MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest) Execute() (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnTopicEndpointExecute(r)
}

/*
UpdateMsgVpnTopicEndpoint Update a Topic Endpoint object.

Update a Topic Endpoint object. Any attribute missing from the request will be left unchanged.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
respectMsgPriorityEnabled||||x||
topicEndpointName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointName The name of the Topic Endpoint.
 @return MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnTopicEndpoint(ctx context.Context, msgVpnName string, topicEndpointName string) MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest {
	return MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointResponse
func (a *MsgVpnApiService) UpdateMsgVpnTopicEndpointExecute(r MsgVpnApiApiUpdateMsgVpnTopicEndpointRequest) (*MsgVpnTopicEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", url.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest struct {
	ctx context.Context
	ApiService *MsgVpnApiService
	msgVpnName string
	topicEndpointTemplateName string
	body *MsgVpnTopicEndpointTemplate
	opaquePassword *string
	select_ *[]string
}

// The Topic Endpoint Template object&#39;s attributes.
func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest) Body(body MsgVpnTopicEndpointTemplate) MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	r.body = &body
	return r
}
// Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
// Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest) Execute() (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	return r.ApiService.UpdateMsgVpnTopicEndpointTemplateExecute(r)
}

/*
UpdateMsgVpnTopicEndpointTemplate Update a Topic Endpoint Template object.

Update a Topic Endpoint Template object. Any attribute missing from the request will be left unchanged.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicEndpointTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param msgVpnName The name of the Message VPN.
 @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 @return MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest
*/
func (a *MsgVpnApiService) UpdateMsgVpnTopicEndpointTemplate(ctx context.Context, msgVpnName string, topicEndpointTemplateName string) MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	return MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest{
		ApiService: a,
		ctx: ctx,
		msgVpnName: msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

// Execute executes the request
//  @return MsgVpnTopicEndpointTemplateResponse
func (a *MsgVpnApiService) UpdateMsgVpnTopicEndpointTemplateExecute(r MsgVpnApiApiUpdateMsgVpnTopicEndpointTemplateRequest) (*MsgVpnTopicEndpointTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MsgVpnApiService.UpdateMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", url.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", url.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
