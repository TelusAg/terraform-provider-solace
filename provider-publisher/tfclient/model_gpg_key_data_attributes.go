/*
Terraform Private Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tfclient

import (
	"encoding/json"
)

// GpgKeyDataAttributes struct for GpgKeyDataAttributes
type GpgKeyDataAttributes struct {
	Namespace  *string `json:"namespace,omitempty"`
	AsciiArmor *string `json:"ascii-armor,omitempty"`
}

// NewGpgKeyDataAttributes instantiates a new GpgKeyDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpgKeyDataAttributes() *GpgKeyDataAttributes {
	this := GpgKeyDataAttributes{}
	return &this
}

// NewGpgKeyDataAttributesWithDefaults instantiates a new GpgKeyDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpgKeyDataAttributesWithDefaults() *GpgKeyDataAttributes {
	this := GpgKeyDataAttributes{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *GpgKeyDataAttributes) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeyDataAttributes) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *GpgKeyDataAttributes) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *GpgKeyDataAttributes) SetNamespace(v string) {
	o.Namespace = &v
}

// GetAsciiArmor returns the AsciiArmor field value if set, zero value otherwise.
func (o *GpgKeyDataAttributes) GetAsciiArmor() string {
	if o == nil || o.AsciiArmor == nil {
		var ret string
		return ret
	}
	return *o.AsciiArmor
}

// GetAsciiArmorOk returns a tuple with the AsciiArmor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeyDataAttributes) GetAsciiArmorOk() (*string, bool) {
	if o == nil || o.AsciiArmor == nil {
		return nil, false
	}
	return o.AsciiArmor, true
}

// HasAsciiArmor returns a boolean if a field has been set.
func (o *GpgKeyDataAttributes) HasAsciiArmor() bool {
	if o != nil && o.AsciiArmor != nil {
		return true
	}

	return false
}

// SetAsciiArmor gets a reference to the given string and assigns it to the AsciiArmor field.
func (o *GpgKeyDataAttributes) SetAsciiArmor(v string) {
	o.AsciiArmor = &v
}

func (o GpgKeyDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.AsciiArmor != nil {
		toSerialize["ascii-armor"] = o.AsciiArmor
	}
	return json.Marshal(toSerialize)
}

type NullableGpgKeyDataAttributes struct {
	value *GpgKeyDataAttributes
	isSet bool
}

func (v NullableGpgKeyDataAttributes) Get() *GpgKeyDataAttributes {
	return v.value
}

func (v *NullableGpgKeyDataAttributes) Set(val *GpgKeyDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableGpgKeyDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableGpgKeyDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpgKeyDataAttributes(val *GpgKeyDataAttributes) *NullableGpgKeyDataAttributes {
	return &NullableGpgKeyDataAttributes{value: val, isSet: true}
}

func (v NullableGpgKeyDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpgKeyDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
